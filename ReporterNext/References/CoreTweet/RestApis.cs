// This file was automatically generated by CoreTweet.
// Do not modify this file directly.

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using CoreTweet.Core;

#pragma warning disable RECS0163

namespace CoreTweet.Rest
{
    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST account.
    /// </summary>
    public partial class Account : ApiProviderBase
    {
        internal Account(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns a representation of the requesting user if authentication was successful.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_email (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> VerifyCredentialsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "account/verify_credentials", parameters);
        }

        /// <summary>
        /// <para>Returns a representation of the requesting user if authentication was successful.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_email (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> VerifyCredentialsAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "account/verify_credentials", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a representation of the requesting user if authentication was successful.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_email (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> VerifyCredentialsAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "account/verify_credentials", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a representation of the requesting user if authentication was successful.</para>
        /// </summary>
        /// /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_email">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> VerifyCredentialsAsync(bool? include_entities = null, bool? skip_status = null, bool? include_email = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_email != null) parameters.Add("include_email", include_email);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "account/verify_credentials", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> trend_location_woeid (optional)</para>
        /// <para>- <c>bool</c> sleep_time_enabled (optional)</para>
        /// <para>- <c>int</c> start_sleep_time (optional)</para>
        /// <para>- <c>int</c> end_sleep_time (optional)</para>
        /// <para>- <c>string</c> time_zone (optional)</para>
        /// <para>- <c>string</c> lang (optional)</para>
        /// <para>- <c>string</c> allow_contributor_request (optional)</para>
        /// <para>- <c>string</c> current_password (optional)</para>
        /// <para>- <c>string</c> allow_dms_from (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The settings of the user.</returns>
        public Task<Setting> SettingsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.SettingsAsyncImpl(InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> trend_location_woeid (optional)</para>
        /// <para>- <c>bool</c> sleep_time_enabled (optional)</para>
        /// <para>- <c>int</c> start_sleep_time (optional)</para>
        /// <para>- <c>int</c> end_sleep_time (optional)</para>
        /// <para>- <c>string</c> time_zone (optional)</para>
        /// <para>- <c>string</c> lang (optional)</para>
        /// <para>- <c>string</c> allow_contributor_request (optional)</para>
        /// <para>- <c>string</c> current_password (optional)</para>
        /// <para>- <c>string</c> allow_dms_from (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The settings of the user.</returns>
        public Task<Setting> SettingsAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.SettingsAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> trend_location_woeid (optional)</para>
        /// <para>- <c>bool</c> sleep_time_enabled (optional)</para>
        /// <para>- <c>int</c> start_sleep_time (optional)</para>
        /// <para>- <c>int</c> end_sleep_time (optional)</para>
        /// <para>- <c>string</c> time_zone (optional)</para>
        /// <para>- <c>string</c> lang (optional)</para>
        /// <para>- <c>string</c> allow_contributor_request (optional)</para>
        /// <para>- <c>string</c> current_password (optional)</para>
        /// <para>- <c>string</c> allow_dms_from (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The settings of the user.</returns>
        public Task<Setting> SettingsAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.SettingsAsyncImpl(InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
        /// </summary>
        /// <param name="trend_location_woeid">optional.</param>
        /// <param name="sleep_time_enabled">optional.</param>
        /// <param name="start_sleep_time">optional.</param>
        /// <param name="end_sleep_time">optional.</param>
        /// <param name="time_zone">optional.</param>
        /// <param name="lang">optional.</param>
        /// <param name="allow_contributor_request">optional.</param>
        /// <param name="current_password">optional.</param>
        /// <param name="allow_dms_from">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The settings of the user.</returns>
        public Task<Setting> SettingsAsync(int? trend_location_woeid = null, bool? sleep_time_enabled = null, int? start_sleep_time = null, int? end_sleep_time = null, string time_zone = null, string lang = null, string allow_contributor_request = null, string current_password = null, string allow_dms_from = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(trend_location_woeid != null) parameters.Add("trend_location_woeid", trend_location_woeid);
            if(sleep_time_enabled != null) parameters.Add("sleep_time_enabled", sleep_time_enabled);
            if(start_sleep_time != null) parameters.Add("start_sleep_time", start_sleep_time);
            if(end_sleep_time != null) parameters.Add("end_sleep_time", end_sleep_time);
            if(time_zone != null) parameters.Add("time_zone", time_zone);
            if(lang != null) parameters.Add("lang", lang);
            if(allow_contributor_request != null) parameters.Add("allow_contributor_request", allow_contributor_request);
            if(current_password != null) parameters.Add("current_password", current_password);
            if(allow_dms_from != null) parameters.Add("allow_dms_from", allow_dms_from);
            return this.SettingsAsyncImpl(parameters, cancellationToken);
        }

        private Task<Setting> SettingsAsyncImpl(IEnumerable<KeyValuePair<string, object>> parameters, CancellationToken cancellationToken)
        {
            var param = parameters.ToArray();
            return this.Tokens.AccessApiAsyncImpl<Setting>(param.Any() ? MethodType.Post : MethodType.Get, "account/settings", param, cancellationToken, "");
        }

        /// <summary>
        /// <para>Sets values that users are able to set under the "Account" tab of their settings page.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> name (optional)</para>
        /// <para>- <c>string</c> url (optional)</para>
        /// <para>- <c>string</c> location (optional)</para>
        /// <para>- <c>string</c> description (optional)</para>
        /// <para>- <c>string</c> profile_link_color (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile", parameters);
        }

        /// <summary>
        /// <para>Sets values that users are able to set under the "Account" tab of their settings page.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> name (optional)</para>
        /// <para>- <c>string</c> url (optional)</para>
        /// <para>- <c>string</c> location (optional)</para>
        /// <para>- <c>string</c> description (optional)</para>
        /// <para>- <c>string</c> profile_link_color (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Sets values that users are able to set under the "Account" tab of their settings page.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> name (optional)</para>
        /// <para>- <c>string</c> url (optional)</para>
        /// <para>- <c>string</c> location (optional)</para>
        /// <para>- <c>string</c> description (optional)</para>
        /// <para>- <c>string</c> profile_link_color (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Sets values that users are able to set under the "Account" tab of their settings page.</para>
        /// </summary>
        /// <param name="name">optional.</param>
        /// <param name="url">optional.</param>
        /// <param name="location">optional.</param>
        /// <param name="description">optional.</param>
        /// <param name="profile_link_color">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileAsync(string name = null, string url = null, string location = null, string description = null, string profile_link_color = null, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(name != null) parameters.Add("name", name);
            if(url != null) parameters.Add("url", url);
            if(location != null) parameters.Add("location", location);
            if(description != null) parameters.Add("description", description);
            if(profile_link_color != null) parameters.Add("profile_link_color", profile_link_color);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s profile background image.</para>
        /// <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>Stream</c> image (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
        /// <para>- <c>FileInfo</c> image (any one is required)</para>
        /// <para>- <c>long</c> media_id (any one is required)</para>
        /// <para>- <c>bool</c> tile (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileBackgroundImageAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile_background_image", parameters);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s profile background image.</para>
        /// <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>Stream</c> image (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
        /// <para>- <c>FileInfo</c> image (any one is required)</para>
        /// <para>- <c>long</c> media_id (any one is required)</para>
        /// <para>- <c>bool</c> tile (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileBackgroundImageAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile_background_image", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s profile background image.</para>
        /// <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>Stream</c> image (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
        /// <para>- <c>FileInfo</c> image (any one is required)</para>
        /// <para>- <c>long</c> media_id (any one is required)</para>
        /// <para>- <c>bool</c> tile (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileBackgroundImageAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile_background_image", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s profile background image.</para>
        /// <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
        /// </summary>
        /// <param name="image">any one is required.</param>
        /// <param name="tile">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileBackgroundImageAsync(Stream image, bool? tile = null, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(image == null) throw new ArgumentNullException("image");
            parameters.Add("image", image);
            if(tile != null) parameters.Add("tile", tile);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile_background_image", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s profile background image.</para>
        /// <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
        /// </summary>
        /// <param name="image">any one is required.</param>
        /// <param name="tile">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileBackgroundImageAsync(IEnumerable<byte> image, bool? tile = null, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(image == null) throw new ArgumentNullException("image");
            parameters.Add("image", image);
            if(tile != null) parameters.Add("tile", tile);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile_background_image", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s profile background image.</para>
        /// <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
        /// </summary>
        /// <param name="image">any one is required.</param>
        /// <param name="tile">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileBackgroundImageAsync(FileInfo image, bool? tile = null, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(image == null) throw new ArgumentNullException("image");
            parameters.Add("image", image);
            if(tile != null) parameters.Add("tile", tile);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile_background_image", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s profile background image.</para>
        /// <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
        /// </summary>
        /// <param name="media_id">any one is required.</param>
        /// <param name="tile">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileBackgroundImageAsync(long media_id, bool? tile = null, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("media_id", media_id);
            if(tile != null) parameters.Add("tile", tile);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile_background_image", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s profile background image.</para>
        /// <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
        /// </summary>
        /// <param name="tile">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileBackgroundImageAsync(bool? tile = null, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(tile != null) parameters.Add("tile", tile);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile_background_image", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Uploads a profile banner on behalf of the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>Stream</c> image (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
        /// <para>- <c>FileInfo</c> image (any one is required)</para>
        /// <para>- <c>string</c> banner (any one is required)</para>
        /// <para>- <c>string</c> width (optional)</para>
        /// <para>- <c>string</c> height (optional)</para>
        /// <para>- <c>string</c> offset_left (optional)</para>
        /// <para>- <c>string</c> offset_top (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        public Task UpdateProfileBannerAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "account/update_profile_banner", parameters);
        }

        /// <summary>
        /// <para>Uploads a profile banner on behalf of the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>Stream</c> image (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
        /// <para>- <c>FileInfo</c> image (any one is required)</para>
        /// <para>- <c>string</c> banner (any one is required)</para>
        /// <para>- <c>string</c> width (optional)</para>
        /// <para>- <c>string</c> height (optional)</para>
        /// <para>- <c>string</c> offset_left (optional)</para>
        /// <para>- <c>string</c> offset_top (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task UpdateProfileBannerAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "account/update_profile_banner", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Uploads a profile banner on behalf of the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>Stream</c> image (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
        /// <para>- <c>FileInfo</c> image (any one is required)</para>
        /// <para>- <c>string</c> banner (any one is required)</para>
        /// <para>- <c>string</c> width (optional)</para>
        /// <para>- <c>string</c> height (optional)</para>
        /// <para>- <c>string</c> offset_left (optional)</para>
        /// <para>- <c>string</c> offset_top (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task UpdateProfileBannerAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "account/update_profile_banner", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Uploads a profile banner on behalf of the authenticating user.</para>
        /// </summary>
        /// <param name="image">any one is required.</param>
        /// <param name="width">optional.</param>
        /// <param name="height">optional.</param>
        /// <param name="offset_left">optional.</param>
        /// <param name="offset_top">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task UpdateProfileBannerAsync(Stream image, string width = null, string height = null, string offset_left = null, string offset_top = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(image == null) throw new ArgumentNullException("image");
            parameters.Add("image", image);
            if(width != null) parameters.Add("width", width);
            if(height != null) parameters.Add("height", height);
            if(offset_left != null) parameters.Add("offset_left", offset_left);
            if(offset_top != null) parameters.Add("offset_top", offset_top);
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "account/update_profile_banner", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Uploads a profile banner on behalf of the authenticating user.</para>
        /// </summary>
        /// <param name="image">any one is required.</param>
        /// <param name="width">optional.</param>
        /// <param name="height">optional.</param>
        /// <param name="offset_left">optional.</param>
        /// <param name="offset_top">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task UpdateProfileBannerAsync(IEnumerable<byte> image, string width = null, string height = null, string offset_left = null, string offset_top = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(image == null) throw new ArgumentNullException("image");
            parameters.Add("image", image);
            if(width != null) parameters.Add("width", width);
            if(height != null) parameters.Add("height", height);
            if(offset_left != null) parameters.Add("offset_left", offset_left);
            if(offset_top != null) parameters.Add("offset_top", offset_top);
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "account/update_profile_banner", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Uploads a profile banner on behalf of the authenticating user.</para>
        /// </summary>
        /// <param name="image">any one is required.</param>
        /// <param name="width">optional.</param>
        /// <param name="height">optional.</param>
        /// <param name="offset_left">optional.</param>
        /// <param name="offset_top">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task UpdateProfileBannerAsync(FileInfo image, string width = null, string height = null, string offset_left = null, string offset_top = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(image == null) throw new ArgumentNullException("image");
            parameters.Add("image", image);
            if(width != null) parameters.Add("width", width);
            if(height != null) parameters.Add("height", height);
            if(offset_left != null) parameters.Add("offset_left", offset_left);
            if(offset_top != null) parameters.Add("offset_top", offset_top);
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "account/update_profile_banner", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Uploads a profile banner on behalf of the authenticating user.</para>
        /// </summary>
        /// <param name="banner">any one is required.</param>
        /// <param name="width">optional.</param>
        /// <param name="height">optional.</param>
        /// <param name="offset_left">optional.</param>
        /// <param name="offset_top">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task UpdateProfileBannerAsync(string banner, string width = null, string height = null, string offset_left = null, string offset_top = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(banner == null) throw new ArgumentNullException("banner");
            parameters.Add("banner", banner);
            if(width != null) parameters.Add("width", width);
            if(height != null) parameters.Add("height", height);
            if(offset_left != null) parameters.Add("offset_left", offset_left);
            if(offset_top != null) parameters.Add("offset_top", offset_top);
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "account/update_profile_banner", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes the uploaded profile banner for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        public Task RemoveProfileBannerAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "account/remove_profile_banner", parameters);
        }

        /// <summary>
        /// <para>Removes the uploaded profile banner for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task RemoveProfileBannerAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "account/remove_profile_banner", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes the uploaded profile banner for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task RemoveProfileBannerAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "account/remove_profile_banner", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes the uploaded profile banner for the authenticating user.</para>
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task RemoveProfileBannerAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "account/remove_profile_banner", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user's profile image.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>Stream</c> image (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
        /// <para>- <c>FileInfo</c> image (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileImageAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile_image", parameters);
        }

        /// <summary>
        /// <para>Updates the authenticating user's profile image.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>Stream</c> image (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
        /// <para>- <c>FileInfo</c> image (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileImageAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile_image", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user's profile image.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>Stream</c> image (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
        /// <para>- <c>FileInfo</c> image (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileImageAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile_image", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user's profile image.</para>
        /// </summary>
        /// <param name="image">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileImageAsync(Stream image, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(image == null) throw new ArgumentNullException("image");
            parameters.Add("image", image);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile_image", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user's profile image.</para>
        /// </summary>
        /// <param name="image">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileImageAsync(IEnumerable<byte> image, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(image == null) throw new ArgumentNullException("image");
            parameters.Add("image", image);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile_image", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user's profile image.</para>
        /// </summary>
        /// <param name="image">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> UpdateProfileImageAsync(FileInfo image, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(image == null) throw new ArgumentNullException("image");
            parameters.Add("image", image);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "account/update_profile_image", parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET application.
    /// </summary>
    public partial class Application : ApiProviderBase
    {
        internal Application(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> resources (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The dictionary.</returns>
        public Task<DictionaryResponse<string, Dictionary<string,RateLimit>>> RateLimitStatusAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiDictionaryAsync<string, Dictionary<string,RateLimit>>(MethodType.Get, "application/rate_limit_status", parameters, "resources");
        }

        /// <summary>
        /// <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> resources (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The dictionary.</returns>
        public Task<DictionaryResponse<string, Dictionary<string,RateLimit>>> RateLimitStatusAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiDictionaryAsync<string, Dictionary<string,RateLimit>>(MethodType.Get, "application/rate_limit_status", parameters, cancellationToken, "resources");
        }

        /// <summary>
        /// <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> resources (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The dictionary.</returns>
        public Task<DictionaryResponse<string, Dictionary<string,RateLimit>>> RateLimitStatusAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiDictionaryAsync<string, Dictionary<string,RateLimit>>(MethodType.Get, "application/rate_limit_status", parameters, cancellationToken, "resources");
        }

        /// <summary>
        /// <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The dictionary.</returns>
        public Task<DictionaryResponse<string, Dictionary<string,RateLimit>>> RateLimitStatusAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            return this.Tokens.AccessApiDictionaryAsync<string, Dictionary<string,RateLimit>>(MethodType.Get, "application/rate_limit_status", parameters, cancellationToken, "resources");
        }

        /// <summary>
        /// <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
        /// </summary>
        /// <param name="resources">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The dictionary.</returns>
        public Task<DictionaryResponse<string, Dictionary<string,RateLimit>>> RateLimitStatusAsync(string resources, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(resources == null) throw new ArgumentNullException("resources");
            parameters.Add("resources", resources);
            return this.Tokens.AccessApiDictionaryAsync<string, Dictionary<string,RateLimit>>(MethodType.Get, "application/rate_limit_status", parameters, cancellationToken, "resources");
        }

        /// <summary>
        /// <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
        /// </summary>
        /// <param name="resources">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The dictionary.</returns>
        public Task<DictionaryResponse<string, Dictionary<string,RateLimit>>> RateLimitStatusAsync(IEnumerable<string> resources, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(resources == null) throw new ArgumentNullException("resources");
            parameters.Add("resources", resources);
            return this.Tokens.AccessApiDictionaryAsync<string, Dictionary<string,RateLimit>>(MethodType.Get, "application/rate_limit_status", parameters, cancellationToken, "resources");
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST blocks.
    /// </summary>
    public partial class Blocks : ApiProviderBase
    {
        internal Blocks(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>IDs.</returns>
        public Task<Cursored<long>> IdsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "blocks/ids", parameters);
        }

        /// <summary>
        /// <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>IDs.</returns>
        public Task<Cursored<long>> IdsAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "blocks/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>IDs.</returns>
        public Task<Cursored<long>> IdsAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "blocks/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
        /// </summary>
        /// <param name="cursor">semi-optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>IDs.</returns>
        public Task<Cursored<long>> IdsAsync(long? cursor = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(cursor != null) parameters.Add("cursor", cursor);
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "blocks/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of user objects that the authenticating user is blocking.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "blocks/list", parameters);
        }

        /// <summary>
        /// <para>Returns a collection of user objects that the authenticating user is blocking.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "blocks/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of user objects that the authenticating user is blocking.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "blocks/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of user objects that the authenticating user is blocking.</para>
        /// </summary>
        /// <param name="cursor">semi-optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(long? cursor = null, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(cursor != null) parameters.Add("cursor", cursor);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "blocks/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Blocks the specified user from following the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> CreateAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "blocks/create", parameters);
        }

        /// <summary>
        /// <para>Blocks the specified user from following the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> CreateAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "blocks/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Blocks the specified user from following the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> CreateAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "blocks/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Blocks the specified user from following the authenticating user.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> CreateAsync(string screen_name, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "blocks/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Blocks the specified user from following the authenticating user.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> CreateAsync(long user_id, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "blocks/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> DestroyAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "blocks/destroy", parameters);
        }

        /// <summary>
        /// <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> DestroyAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "blocks/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> DestroyAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "blocks/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> DestroyAsync(string screen_name, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "blocks/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user object.</returns>
        public Task<UserResponse> DestroyAsync(long user_id, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "blocks/destroy", parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST collections.
    /// </summary>
    public partial class Collections : ApiProviderBase
    {
        internal Collections(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Find Collections created by a specific user or containing a specific curated Tweet.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (optional)</para>
        /// <para>- <c>string</c> screen_name (optional)</para>
        /// <para>- <c>long</c> tweet_id (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>string</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The timelines.</returns>
        public Task<CollectionsListResult> ListAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.ListAsyncImpl(InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Find Collections created by a specific user or containing a specific curated Tweet.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (optional)</para>
        /// <para>- <c>string</c> screen_name (optional)</para>
        /// <para>- <c>long</c> tweet_id (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>string</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The timelines.</returns>
        public Task<CollectionsListResult> ListAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.ListAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Find Collections created by a specific user or containing a specific curated Tweet.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (optional)</para>
        /// <para>- <c>string</c> screen_name (optional)</para>
        /// <para>- <c>long</c> tweet_id (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>string</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The timelines.</returns>
        public Task<CollectionsListResult> ListAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.ListAsyncImpl(InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Find Collections created by a specific user or containing a specific curated Tweet.</para>
        /// </summary>
        /// <param name="user_id">optional.</param>
        /// <param name="screen_name">optional.</param>
        /// <param name="tweet_id">optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="cursor">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The timelines.</returns>
        public Task<CollectionsListResult> ListAsync(long? user_id = null, string screen_name = null, long? tweet_id = null, int? count = null, string cursor = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(user_id != null) parameters.Add("user_id", user_id);
            if(screen_name != null) parameters.Add("screen_name", screen_name);
            if(tweet_id != null) parameters.Add("tweet_id", tweet_id);
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            return this.ListAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Retrieve information associated with a specific Collection.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The timeline.</returns>
        public Task<TimelineResponse> ShowAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.ShowAsyncImpl(InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Retrieve information associated with a specific Collection.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The timeline.</returns>
        public Task<TimelineResponse> ShowAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.ShowAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Retrieve information associated with a specific Collection.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The timeline.</returns>
        public Task<TimelineResponse> ShowAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.ShowAsyncImpl(InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Retrieve information associated with a specific Collection.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The timeline.</returns>
        public Task<TimelineResponse> ShowAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(id == null) throw new ArgumentNullException("id");
            parameters.Add("id", id);
            return this.ShowAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Retrieve the identified Collection, presented as a list of the Tweets curated within.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> max_position (optional)</para>
        /// <para>- <c>long</c> min_position (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The entries.</returns>
        public Task<CollectionEntriesResult> EntriesAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.EntriesAsyncImpl(InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Retrieve the identified Collection, presented as a list of the Tweets curated within.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> max_position (optional)</para>
        /// <para>- <c>long</c> min_position (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The entries.</returns>
        public Task<CollectionEntriesResult> EntriesAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.EntriesAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Retrieve the identified Collection, presented as a list of the Tweets curated within.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> max_position (optional)</para>
        /// <para>- <c>long</c> min_position (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The entries.</returns>
        public Task<CollectionEntriesResult> EntriesAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.EntriesAsyncImpl(InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Retrieve the identified Collection, presented as a list of the Tweets curated within.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="count">optional.</param>
        /// <param name="max_position">optional.</param>
        /// <param name="min_position">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The entries.</returns>
        public Task<CollectionEntriesResult> EntriesAsync(string id, int? count = null, long? max_position = null, long? min_position = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(id == null) throw new ArgumentNullException("id");
            parameters.Add("id", id);
            if(count != null) parameters.Add("count", count);
            if(max_position != null) parameters.Add("max_position", max_position);
            if(min_position != null) parameters.Add("min_position", min_position);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.EntriesAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Create a Collection owned by the currently authenticated user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> name (required)</para>
        /// <para>- <c>string</c> description (optional)</para>
        /// <para>- <c>string</c> url (optional)</para>
        /// <para>- <c>string</c> timeline_order (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The timeline.</returns>
        public Task<TimelineResponse> CreateAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.CreateAsyncImpl(InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Create a Collection owned by the currently authenticated user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> name (required)</para>
        /// <para>- <c>string</c> description (optional)</para>
        /// <para>- <c>string</c> url (optional)</para>
        /// <para>- <c>string</c> timeline_order (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The timeline.</returns>
        public Task<TimelineResponse> CreateAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.CreateAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Create a Collection owned by the currently authenticated user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> name (required)</para>
        /// <para>- <c>string</c> description (optional)</para>
        /// <para>- <c>string</c> url (optional)</para>
        /// <para>- <c>string</c> timeline_order (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The timeline.</returns>
        public Task<TimelineResponse> CreateAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.CreateAsyncImpl(InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Create a Collection owned by the currently authenticated user.</para>
        /// </summary>
        /// <param name="name">required.</param>
        /// <param name="description">optional.</param>
        /// <param name="url">optional.</param>
        /// <param name="timeline_order">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The timeline.</returns>
        public Task<TimelineResponse> CreateAsync(string name, string description = null, string url = null, string timeline_order = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(name == null) throw new ArgumentNullException("name");
            parameters.Add("name", name);
            if(description != null) parameters.Add("description", description);
            if(url != null) parameters.Add("url", url);
            if(timeline_order != null) parameters.Add("timeline_order", timeline_order);
            return this.CreateAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Update information concerning a Collection owned by the currently authenticated user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>string</c> name (optional)</para>
        /// <para>- <c>string</c> description (optional)</para>
        /// <para>- <c>string</c> url (optional)</para>
        /// <para>- <c>string</c> timeline_order (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The timeline.</returns>
        public Task<TimelineResponse> UpdateAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.UpdateAsyncImpl(InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Update information concerning a Collection owned by the currently authenticated user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>string</c> name (optional)</para>
        /// <para>- <c>string</c> description (optional)</para>
        /// <para>- <c>string</c> url (optional)</para>
        /// <para>- <c>string</c> timeline_order (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The timeline.</returns>
        public Task<TimelineResponse> UpdateAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.UpdateAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Update information concerning a Collection owned by the currently authenticated user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>string</c> name (optional)</para>
        /// <para>- <c>string</c> description (optional)</para>
        /// <para>- <c>string</c> url (optional)</para>
        /// <para>- <c>string</c> timeline_order (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The timeline.</returns>
        public Task<TimelineResponse> UpdateAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.UpdateAsyncImpl(InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Update information concerning a Collection owned by the currently authenticated user.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="name">optional.</param>
        /// <param name="description">optional.</param>
        /// <param name="url">optional.</param>
        /// <param name="timeline_order">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The timeline.</returns>
        public Task<TimelineResponse> UpdateAsync(string id, string name = null, string description = null, string url = null, string timeline_order = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(id == null) throw new ArgumentNullException("id");
            parameters.Add("id", id);
            if(name != null) parameters.Add("name", name);
            if(description != null) parameters.Add("description", description);
            if(url != null) parameters.Add("url", url);
            if(timeline_order != null) parameters.Add("timeline_order", timeline_order);
            return this.UpdateAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Permanently delete a Collection owned by the currently authenticated user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The value that indicates whether the operation has been succeeded.</returns>
        public Task<CollectionDestroyResult> DestroyAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<CollectionDestroyResult>(MethodType.Post, "collections/destroy", parameters);
        }

        /// <summary>
        /// <para>Permanently delete a Collection owned by the currently authenticated user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The value that indicates whether the operation has been succeeded.</returns>
        public Task<CollectionDestroyResult> DestroyAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<CollectionDestroyResult>(MethodType.Post, "collections/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Permanently delete a Collection owned by the currently authenticated user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The value that indicates whether the operation has been succeeded.</returns>
        public Task<CollectionDestroyResult> DestroyAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<CollectionDestroyResult>(MethodType.Post, "collections/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Permanently delete a Collection owned by the currently authenticated user.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The value that indicates whether the operation has been succeeded.</returns>
        public Task<CollectionDestroyResult> DestroyAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(id == null) throw new ArgumentNullException("id");
            parameters.Add("id", id);
            return this.Tokens.AccessApiAsync<CollectionDestroyResult>(MethodType.Post, "collections/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Add a specified Tweet to a Collection.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>long</c> tweet_id (required)</para>
        /// <para>- <c>long</c> relative_to (optional)</para>
        /// <para>- <c>bool</c> above (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The errors.</returns>
        public Task<ListedResponse<CollectionEntryOperationError>> EntriesAddAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<CollectionEntryOperationError>(MethodType.Post, "collections/entries/add", parameters, "response.errors");
        }

        /// <summary>
        /// <para>Add a specified Tweet to a Collection.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>long</c> tweet_id (required)</para>
        /// <para>- <c>long</c> relative_to (optional)</para>
        /// <para>- <c>bool</c> above (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The errors.</returns>
        public Task<ListedResponse<CollectionEntryOperationError>> EntriesAddAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<CollectionEntryOperationError>(MethodType.Post, "collections/entries/add", parameters, cancellationToken, "response.errors");
        }

        /// <summary>
        /// <para>Add a specified Tweet to a Collection.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>long</c> tweet_id (required)</para>
        /// <para>- <c>long</c> relative_to (optional)</para>
        /// <para>- <c>bool</c> above (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The errors.</returns>
        public Task<ListedResponse<CollectionEntryOperationError>> EntriesAddAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<CollectionEntryOperationError>(MethodType.Post, "collections/entries/add", parameters, cancellationToken, "response.errors");
        }

        /// <summary>
        /// <para>Add a specified Tweet to a Collection.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="tweet_id">required.</param>
        /// <param name="relative_to">optional.</param>
        /// <param name="above">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The errors.</returns>
        public Task<ListedResponse<CollectionEntryOperationError>> EntriesAddAsync(string id, long tweet_id, long? relative_to = null, bool? above = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(id == null) throw new ArgumentNullException("id");
            parameters.Add("id", id);
            parameters.Add("tweet_id", tweet_id);
            if(relative_to != null) parameters.Add("relative_to", relative_to);
            if(above != null) parameters.Add("above", above);
            return this.Tokens.AccessApiArrayAsync<CollectionEntryOperationError>(MethodType.Post, "collections/entries/add", parameters, cancellationToken, "response.errors");
        }

        /// <summary>
        /// <para>Remove the specified Tweet from a Collection.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>long</c> tweet_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The errors.</returns>
        public Task<ListedResponse<CollectionEntryOperationError>> EntriesRemoveAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<CollectionEntryOperationError>(MethodType.Post, "collections/entries/remove", parameters, "response.errors");
        }

        /// <summary>
        /// <para>Remove the specified Tweet from a Collection.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>long</c> tweet_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The errors.</returns>
        public Task<ListedResponse<CollectionEntryOperationError>> EntriesRemoveAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<CollectionEntryOperationError>(MethodType.Post, "collections/entries/remove", parameters, cancellationToken, "response.errors");
        }

        /// <summary>
        /// <para>Remove the specified Tweet from a Collection.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>long</c> tweet_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The errors.</returns>
        public Task<ListedResponse<CollectionEntryOperationError>> EntriesRemoveAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<CollectionEntryOperationError>(MethodType.Post, "collections/entries/remove", parameters, cancellationToken, "response.errors");
        }

        /// <summary>
        /// <para>Remove the specified Tweet from a Collection.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="tweet_id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The errors.</returns>
        public Task<ListedResponse<CollectionEntryOperationError>> EntriesRemoveAsync(string id, long tweet_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(id == null) throw new ArgumentNullException("id");
            parameters.Add("id", id);
            parameters.Add("tweet_id", tweet_id);
            return this.Tokens.AccessApiArrayAsync<CollectionEntryOperationError>(MethodType.Post, "collections/entries/remove", parameters, cancellationToken, "response.errors");
        }

        /// <summary>
        /// <para>Move a specified Tweet to a new position in a curation_reverse_chron ordered collection.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>long</c> tweet_id (required)</para>
        /// <para>- <c>long</c> relative_to (required)</para>
        /// <para>- <c>bool</c> above (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The errors.</returns>
        public Task<ListedResponse<CollectionEntryOperationError>> EntriesMoveAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<CollectionEntryOperationError>(MethodType.Post, "collections/entries/move", parameters, "response.errors");
        }

        /// <summary>
        /// <para>Move a specified Tweet to a new position in a curation_reverse_chron ordered collection.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>long</c> tweet_id (required)</para>
        /// <para>- <c>long</c> relative_to (required)</para>
        /// <para>- <c>bool</c> above (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The errors.</returns>
        public Task<ListedResponse<CollectionEntryOperationError>> EntriesMoveAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<CollectionEntryOperationError>(MethodType.Post, "collections/entries/move", parameters, cancellationToken, "response.errors");
        }

        /// <summary>
        /// <para>Move a specified Tweet to a new position in a curation_reverse_chron ordered collection.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>long</c> tweet_id (required)</para>
        /// <para>- <c>long</c> relative_to (required)</para>
        /// <para>- <c>bool</c> above (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The errors.</returns>
        public Task<ListedResponse<CollectionEntryOperationError>> EntriesMoveAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<CollectionEntryOperationError>(MethodType.Post, "collections/entries/move", parameters, cancellationToken, "response.errors");
        }

        /// <summary>
        /// <para>Move a specified Tweet to a new position in a curation_reverse_chron ordered collection.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="tweet_id">required.</param>
        /// <param name="relative_to">required.</param>
        /// <param name="above">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The errors.</returns>
        public Task<ListedResponse<CollectionEntryOperationError>> EntriesMoveAsync(string id, long tweet_id, long relative_to, bool? above = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(id == null) throw new ArgumentNullException("id");
            parameters.Add("id", id);
            parameters.Add("tweet_id", tweet_id);
            parameters.Add("relative_to", relative_to);
            if(above != null) parameters.Add("above", above);
            return this.Tokens.AccessApiArrayAsync<CollectionEntryOperationError>(MethodType.Post, "collections/entries/move", parameters, cancellationToken, "response.errors");
        }

        /// <summary>
        /// <para>Curate a Collection by adding or removing Tweets in bulk.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>IEnumerable&lt;CollectionEntryChange&gt;</c> changes (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The errors.</returns>
        public Task<ListedResponse<CollectionEntryOperationError>> EntriesCurateAsync(params Expression<Func<string, object>>[] parameters)
        {
            var jm = new string[4];
            jm[0] = "{";
            jm[1] = "\"id\": $id,";
            jm[2] = "\"changes\": $changes";
            jm[3] = "}";
            return this.Tokens.AccessJsonParameteredApiArrayAsync<CollectionEntryOperationError>("collections/entries/curate", parameters, jm, "response.errors");
        }

        /// <summary>
        /// <para>Curate a Collection by adding or removing Tweets in bulk.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>IEnumerable&lt;CollectionEntryChange&gt;</c> changes (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The errors.</returns>
        public Task<ListedResponse<CollectionEntryOperationError>> EntriesCurateAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            var jm = new string[4];
            jm[0] = "{";
            jm[1] = "\"id\": $id,";
            jm[2] = "\"changes\": $changes";
            jm[3] = "}";
            return this.Tokens.AccessJsonParameteredApiArrayAsync<CollectionEntryOperationError>("collections/entries/curate", parameters, jm, cancellationToken, "response.errors");
        }

        /// <summary>
        /// <para>Curate a Collection by adding or removing Tweets in bulk.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// <para>- <c>IEnumerable&lt;CollectionEntryChange&gt;</c> changes (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The errors.</returns>
        public Task<ListedResponse<CollectionEntryOperationError>> EntriesCurateAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            var jm = new string[4];
            jm[0] = "{";
            jm[1] = "\"id\": $id,";
            jm[2] = "\"changes\": $changes";
            jm[3] = "}";
            return this.Tokens.AccessJsonParameteredApiArrayAsync<CollectionEntryOperationError>("collections/entries/curate", parameters, jm, cancellationToken, "response.errors");
        }

        /// <summary>
        /// <para>Curate a Collection by adding or removing Tweets in bulk.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="changes">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The errors.</returns>
        public Task<ListedResponse<CollectionEntryOperationError>> EntriesCurateAsync(string id, IEnumerable<CollectionEntryChange> changes, CancellationToken cancellationToken = default(CancellationToken))
        {
            var jm = new string[4];
            jm[0] = "{";
            jm[1] = "\"id\": $id,";
            jm[2] = "\"changes\": $changes";
            jm[3] = "}";
            var parameters = new Dictionary<string, object>();
            if(id == null) throw new ArgumentNullException("id");
            parameters.Add("id", id);
            if(changes == null) throw new ArgumentNullException("changes");
            parameters.Add("changes", changes);
            return this.Tokens.AccessJsonParameteredApiArrayAsync<CollectionEntryOperationError>("collections/entries/curate", parameters, jm, cancellationToken, "response.errors");
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST direct_messages.
    /// </summary>
    public partial class DirectMessages : ApiProviderBase
    {
        internal DirectMessages(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns the most recent direct messages sent to the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>int</c> page (optional)</para>
        /// <para>- <c>bool</c> full_text (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The direct messages.</returns>
        public Task<ListedResponse<DirectMessage>> ReceivedAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<DirectMessage>(MethodType.Get, "direct_messages", parameters);
        }

        /// <summary>
        /// <para>Returns the most recent direct messages sent to the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>int</c> page (optional)</para>
        /// <para>- <c>bool</c> full_text (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The direct messages.</returns>
        public Task<ListedResponse<DirectMessage>> ReceivedAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<DirectMessage>(MethodType.Get, "direct_messages", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the most recent direct messages sent to the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>int</c> page (optional)</para>
        /// <para>- <c>bool</c> full_text (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The direct messages.</returns>
        public Task<ListedResponse<DirectMessage>> ReceivedAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<DirectMessage>(MethodType.Get, "direct_messages", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the most recent direct messages sent to the authenticating user.</para>
        /// </summary>
        /// <param name="since_id">optional.</param>
        /// <param name="max_id">optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="page">optional.</param>
        /// <param name="full_text">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The direct messages.</returns>
        public Task<ListedResponse<DirectMessage>> ReceivedAsync(long? since_id = null, long? max_id = null, int? count = null, int? page = null, bool? full_text = null, bool? include_entities = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(since_id != null) parameters.Add("since_id", since_id);
            if(max_id != null) parameters.Add("max_id", max_id);
            if(count != null) parameters.Add("count", count);
            if(page != null) parameters.Add("page", page);
            if(full_text != null) parameters.Add("full_text", full_text);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            return this.Tokens.AccessApiArrayAsync<DirectMessage>(MethodType.Get, "direct_messages", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the most recent direct messages sent by the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>int</c> page (optional)</para>
        /// <para>- <c>bool</c> full_text (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The direct messages.</returns>
        public Task<ListedResponse<DirectMessage>> SentAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<DirectMessage>(MethodType.Get, "direct_messages/sent", parameters);
        }

        /// <summary>
        /// <para>Returns the most recent direct messages sent by the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>int</c> page (optional)</para>
        /// <para>- <c>bool</c> full_text (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The direct messages.</returns>
        public Task<ListedResponse<DirectMessage>> SentAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<DirectMessage>(MethodType.Get, "direct_messages/sent", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the most recent direct messages sent by the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>int</c> page (optional)</para>
        /// <para>- <c>bool</c> full_text (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The direct messages.</returns>
        public Task<ListedResponse<DirectMessage>> SentAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<DirectMessage>(MethodType.Get, "direct_messages/sent", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the most recent direct messages sent by the authenticating user.</para>
        /// </summary>
        /// <param name="since_id">optional.</param>
        /// <param name="max_id">optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="page">optional.</param>
        /// <param name="full_text">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The direct messages.</returns>
        public Task<ListedResponse<DirectMessage>> SentAsync(long? since_id = null, long? max_id = null, int? count = null, int? page = null, bool? full_text = null, bool? include_entities = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(since_id != null) parameters.Add("since_id", since_id);
            if(max_id != null) parameters.Add("max_id", max_id);
            if(count != null) parameters.Add("count", count);
            if(page != null) parameters.Add("page", page);
            if(full_text != null) parameters.Add("full_text", full_text);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            return this.Tokens.AccessApiArrayAsync<DirectMessage>(MethodType.Get, "direct_messages/sent", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a single direct message, specified by an id parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> full_text (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The direct message.</returns>
        public Task<DirectMessageResponse> ShowAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<DirectMessageResponse>(MethodType.Get, "direct_messages/show", parameters);
        }

        /// <summary>
        /// <para>Returns a single direct message, specified by an id parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> full_text (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The direct message.</returns>
        public Task<DirectMessageResponse> ShowAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<DirectMessageResponse>(MethodType.Get, "direct_messages/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a single direct message, specified by an id parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> full_text (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The direct message.</returns>
        public Task<DirectMessageResponse> ShowAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<DirectMessageResponse>(MethodType.Get, "direct_messages/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a single direct message, specified by an id parameter.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="full_text">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The direct message.</returns>
        public Task<DirectMessageResponse> ShowAsync(long id, bool? full_text = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            if(full_text != null) parameters.Add("full_text", full_text);
            return this.Tokens.AccessApiAsync<DirectMessageResponse>(MethodType.Get, "direct_messages/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Sends a new direct message to the specified user from the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>string</c> text (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The direct message.</returns>
        public Task<DirectMessageResponse> NewAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<DirectMessageResponse>(MethodType.Post, "direct_messages/new", parameters);
        }

        /// <summary>
        /// <para>Sends a new direct message to the specified user from the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>string</c> text (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The direct message.</returns>
        public Task<DirectMessageResponse> NewAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<DirectMessageResponse>(MethodType.Post, "direct_messages/new", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Sends a new direct message to the specified user from the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>string</c> text (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The direct message.</returns>
        public Task<DirectMessageResponse> NewAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<DirectMessageResponse>(MethodType.Post, "direct_messages/new", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Sends a new direct message to the specified user from the authenticating user.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="text">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The direct message.</returns>
        public Task<DirectMessageResponse> NewAsync(long user_id, string text, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(text == null) throw new ArgumentNullException("text");
            parameters.Add("text", text);
            return this.Tokens.AccessApiAsync<DirectMessageResponse>(MethodType.Post, "direct_messages/new", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Sends a new direct message to the specified user from the authenticating user.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="text">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The direct message.</returns>
        public Task<DirectMessageResponse> NewAsync(string screen_name, string text, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(text == null) throw new ArgumentNullException("text");
            parameters.Add("text", text);
            return this.Tokens.AccessApiAsync<DirectMessageResponse>(MethodType.Post, "direct_messages/new", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Destroys the direct message specified in the required ID parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The direct message.</returns>
        public Task<DirectMessageResponse> DestroyAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<DirectMessageResponse>(MethodType.Post, "direct_messages/destroy", parameters);
        }

        /// <summary>
        /// <para>Destroys the direct message specified in the required ID parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The direct message.</returns>
        public Task<DirectMessageResponse> DestroyAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<DirectMessageResponse>(MethodType.Post, "direct_messages/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Destroys the direct message specified in the required ID parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The direct message.</returns>
        public Task<DirectMessageResponse> DestroyAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<DirectMessageResponse>(MethodType.Post, "direct_messages/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Destroys the direct message specified in the required ID parameter.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The direct message.</returns>
        public Task<DirectMessageResponse> DestroyAsync(long id, bool? include_entities = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            return this.Tokens.AccessApiAsync<DirectMessageResponse>(MethodType.Post, "direct_messages/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Marks a message as read in the recipient’s Direct Message conversation view with the sender.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> last_read_event_id (required)</para>
        /// <para>- <c>long</c> recipient_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        public Task MarkReadAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "direct_messages/mark_read", parameters);
        }

        /// <summary>
        /// <para>Marks a message as read in the recipient’s Direct Message conversation view with the sender.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> last_read_event_id (required)</para>
        /// <para>- <c>long</c> recipient_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task MarkReadAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "direct_messages/mark_read", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Marks a message as read in the recipient’s Direct Message conversation view with the sender.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> last_read_event_id (required)</para>
        /// <para>- <c>long</c> recipient_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task MarkReadAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "direct_messages/mark_read", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Marks a message as read in the recipient’s Direct Message conversation view with the sender.</para>
        /// </summary>
        /// <param name="last_read_event_id">required.</param>
        /// <param name="recipient_id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task MarkReadAsync(long last_read_event_id, long recipient_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("last_read_event_id", last_read_event_id);
            parameters.Add("recipient_id", recipient_id);
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "direct_messages/mark_read", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> recipient_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        public Task IndicateTypingAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "direct_messages/indicate_typing", parameters);
        }

        /// <summary>
        /// <para>Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> recipient_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task IndicateTypingAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "direct_messages/indicate_typing", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> recipient_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task IndicateTypingAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "direct_messages/indicate_typing", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.</para>
        /// </summary>
        /// <param name="recipient_id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task IndicateTypingAsync(long recipient_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("recipient_id", recipient_id);
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Post, "direct_messages/indicate_typing", parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST direct_messages/events.
    /// </summary>
    public partial class DirectMessagesEvents : ApiProviderBase
    {
        internal DirectMessagesEvents(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> text (required)</para>
        /// <para>- <c>long</c> recipient_id (required)</para>
        /// <para>- <c>QuickReply</c> quick_reply (optional)</para>
        /// <para>- <c>string</c> attachment_type (optional)</para>
        /// <para>- <c>long</c> attachment_media_id (optional)</para>
        /// <para>- <c>IEnumerable&lt;MessageCallToAction&gt;</c> ctas (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The published event.</returns>
        public Task<MessageCreateEventResponse> NewAsync(params Expression<Func<string, object>>[] parameters)
        {
            var jm = new string[12];
            jm[0] = "{\"event\": {\"type\": \"message_create\",\"message_create\": {\"target\": {";
            jm[1] = "\"recipient_id\": $recipient_id";
            jm[2] = "},\"message_data\": {";
            jm[3] = "\"text\": $text,";
            jm[4] = "\"quick_reply\": $quick_reply,";
            jm[5] = "\"attachment\": {";
            jm[6] = "\"type\": $attachment_type,";
            jm[7] = "\"media\": {";
            jm[8] = "\"id\": $attachment_media_id";
            jm[9] = "}},";
            jm[10] = "\"ctas\": $ctas";
            jm[11] = "}}}}";
            return this.Tokens.AccessJsonParameteredApiAsync<MessageCreateEventResponse>("direct_messages/events/new", parameters, jm);
        }

        /// <summary>
        /// <para>Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> text (required)</para>
        /// <para>- <c>long</c> recipient_id (required)</para>
        /// <para>- <c>QuickReply</c> quick_reply (optional)</para>
        /// <para>- <c>string</c> attachment_type (optional)</para>
        /// <para>- <c>long</c> attachment_media_id (optional)</para>
        /// <para>- <c>IEnumerable&lt;MessageCallToAction&gt;</c> ctas (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The published event.</returns>
        public Task<MessageCreateEventResponse> NewAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            var jm = new string[12];
            jm[0] = "{\"event\": {\"type\": \"message_create\",\"message_create\": {\"target\": {";
            jm[1] = "\"recipient_id\": $recipient_id";
            jm[2] = "},\"message_data\": {";
            jm[3] = "\"text\": $text,";
            jm[4] = "\"quick_reply\": $quick_reply,";
            jm[5] = "\"attachment\": {";
            jm[6] = "\"type\": $attachment_type,";
            jm[7] = "\"media\": {";
            jm[8] = "\"id\": $attachment_media_id";
            jm[9] = "}},";
            jm[10] = "\"ctas\": $ctas";
            jm[11] = "}}}}";
            return this.Tokens.AccessJsonParameteredApiAsync<MessageCreateEventResponse>("direct_messages/events/new", parameters, jm, cancellationToken);
        }

        /// <summary>
        /// <para>Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> text (required)</para>
        /// <para>- <c>long</c> recipient_id (required)</para>
        /// <para>- <c>QuickReply</c> quick_reply (optional)</para>
        /// <para>- <c>string</c> attachment_type (optional)</para>
        /// <para>- <c>long</c> attachment_media_id (optional)</para>
        /// <para>- <c>IEnumerable&lt;MessageCallToAction&gt;</c> ctas (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The published event.</returns>
        public Task<MessageCreateEventResponse> NewAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            var jm = new string[12];
            jm[0] = "{\"event\": {\"type\": \"message_create\",\"message_create\": {\"target\": {";
            jm[1] = "\"recipient_id\": $recipient_id";
            jm[2] = "},\"message_data\": {";
            jm[3] = "\"text\": $text,";
            jm[4] = "\"quick_reply\": $quick_reply,";
            jm[5] = "\"attachment\": {";
            jm[6] = "\"type\": $attachment_type,";
            jm[7] = "\"media\": {";
            jm[8] = "\"id\": $attachment_media_id";
            jm[9] = "}},";
            jm[10] = "\"ctas\": $ctas";
            jm[11] = "}}}}";
            return this.Tokens.AccessJsonParameteredApiAsync<MessageCreateEventResponse>("direct_messages/events/new", parameters, jm, cancellationToken);
        }

        /// <summary>
        /// <para>Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.</para>
        /// </summary>
        /// <param name="text">required.</param>
        /// <param name="recipient_id">required.</param>
        /// <param name="quick_reply">optional.</param>
        /// <param name="attachment_type">optional.</param>
        /// <param name="attachment_media_id">optional.</param>
        /// <param name="ctas">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The published event.</returns>
        public Task<MessageCreateEventResponse> NewAsync(string text, long recipient_id, QuickReply quick_reply = null, string attachment_type = null, long? attachment_media_id = null, IEnumerable<MessageCallToAction> ctas = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var jm = new string[12];
            jm[0] = "{\"event\": {\"type\": \"message_create\",\"message_create\": {\"target\": {";
            jm[1] = "\"recipient_id\": $recipient_id";
            jm[2] = "},\"message_data\": {";
            jm[3] = "\"text\": $text,";
            jm[4] = "\"quick_reply\": $quick_reply,";
            jm[5] = "\"attachment\": {";
            jm[6] = "\"type\": $attachment_type,";
            jm[7] = "\"media\": {";
            jm[8] = "\"id\": $attachment_media_id";
            jm[9] = "}},";
            jm[10] = "\"ctas\": $ctas";
            jm[11] = "}}}}";
            var parameters = new Dictionary<string, object>();
            if(text == null) throw new ArgumentNullException("text");
            parameters.Add("text", text);
            parameters.Add("recipient_id", recipient_id);
            if(quick_reply != null) parameters.Add("quick_reply", quick_reply);
            if(attachment_type != null) parameters.Add("attachment_type", attachment_type);
            if(attachment_media_id != null) parameters.Add("attachment_media_id", attachment_media_id);
            if(ctas != null) parameters.Add("ctas", ctas);
            return this.Tokens.AccessJsonParameteredApiAsync<MessageCreateEventResponse>("direct_messages/events/new", parameters, jm, cancellationToken);
        }

        /// <summary>
        /// <para>Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>string</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The Direct Messages.</returns>
        public Task<CursoredMessageCreateEvents> ListAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<CursoredMessageCreateEvents>(MethodType.Get, "direct_messages/events/list", parameters);
        }

        /// <summary>
        /// <para>Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>string</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Direct Messages.</returns>
        public Task<CursoredMessageCreateEvents> ListAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<CursoredMessageCreateEvents>(MethodType.Get, "direct_messages/events/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>string</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Direct Messages.</returns>
        public Task<CursoredMessageCreateEvents> ListAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<CursoredMessageCreateEvents>(MethodType.Get, "direct_messages/events/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.</para>
        /// </summary>
        /// <param name="count">optional.</param>
        /// <param name="cursor">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Direct Messages.</returns>
        public Task<CursoredMessageCreateEvents> ListAsync(int? count = null, string cursor = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            return this.Tokens.AccessApiAsync<CursoredMessageCreateEvents>(MethodType.Get, "direct_messages/events/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a single Direct Message event by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The Direct Message.</returns>
        public Task<MessageCreateEventResponse> ShowAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<MessageCreateEventResponse>(MethodType.Get, "direct_messages/events/show", parameters);
        }

        /// <summary>
        /// <para>Returns a single Direct Message event by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Direct Message.</returns>
        public Task<MessageCreateEventResponse> ShowAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<MessageCreateEventResponse>(MethodType.Get, "direct_messages/events/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a single Direct Message event by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Direct Message.</returns>
        public Task<MessageCreateEventResponse> ShowAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<MessageCreateEventResponse>(MethodType.Get, "direct_messages/events/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a single Direct Message event by the given id.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Direct Message.</returns>
        public Task<MessageCreateEventResponse> ShowAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(id == null) throw new ArgumentNullException("id");
            parameters.Add("id", id);
            return this.Tokens.AccessApiAsync<MessageCreateEventResponse>(MethodType.Get, "direct_messages/events/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Deletes the direct message specified in the required ID parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        public Task DestroyAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Delete, "direct_messages/events/destroy", parameters);
        }

        /// <summary>
        /// <para>Deletes the direct message specified in the required ID parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task DestroyAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Delete, "direct_messages/events/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Deletes the direct message specified in the required ID parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task DestroyAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Delete, "direct_messages/events/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Deletes the direct message specified in the required ID parameter.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task DestroyAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(id == null) throw new ArgumentNullException("id");
            parameters.Add("id", id);
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Delete, "direct_messages/events/destroy", parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST favorites.
    /// </summary>
    public partial class Favorites : ApiProviderBase
    {
        internal Favorites(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (optional)</para>
        /// <para>- <c>string</c> screen_name (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> ListAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "favorites/list", parameters);
        }

        /// <summary>
        /// <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (optional)</para>
        /// <para>- <c>string</c> screen_name (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> ListAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "favorites/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (optional)</para>
        /// <para>- <c>string</c> screen_name (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> ListAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "favorites/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
        /// </summary>
        /// <param name="id">optional.</param>
        /// <param name="screen_name">optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="since_id">optional.</param>
        /// <param name="max_id">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> ListAsync(long? id = null, string screen_name = null, int? count = null, long? since_id = null, long? max_id = null, bool? include_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(id != null) parameters.Add("id", id);
            if(screen_name != null) parameters.Add("screen_name", screen_name);
            if(count != null) parameters.Add("count", count);
            if(since_id != null) parameters.Add("since_id", since_id);
            if(max_id != null) parameters.Add("max_id", max_id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "favorites/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Favorites the status specified in the ID parameter as the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The favorited status.</returns>
        public Task<StatusResponse> CreateAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<StatusResponse>(MethodType.Post, "favorites/create", parameters);
        }

        /// <summary>
        /// <para>Favorites the status specified in the ID parameter as the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The favorited status.</returns>
        public Task<StatusResponse> CreateAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<StatusResponse>(MethodType.Post, "favorites/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Favorites the status specified in the ID parameter as the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The favorited status.</returns>
        public Task<StatusResponse> CreateAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<StatusResponse>(MethodType.Post, "favorites/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Favorites the status specified in the ID parameter as the authenticating user.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The favorited status.</returns>
        public Task<StatusResponse> CreateAsync(long id, bool? include_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<StatusResponse>(MethodType.Post, "favorites/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Un-favorites the status specified in the ID parameter as the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The unfavorited status.</returns>
        public Task<StatusResponse> DestroyAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<StatusResponse>(MethodType.Post, "favorites/destroy", parameters);
        }

        /// <summary>
        /// <para>Un-favorites the status specified in the ID parameter as the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The unfavorited status.</returns>
        public Task<StatusResponse> DestroyAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<StatusResponse>(MethodType.Post, "favorites/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Un-favorites the status specified in the ID parameter as the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The unfavorited status.</returns>
        public Task<StatusResponse> DestroyAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<StatusResponse>(MethodType.Post, "favorites/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Un-favorites the status specified in the ID parameter as the authenticating user.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The unfavorited status.</returns>
        public Task<StatusResponse> DestroyAsync(long id, bool? include_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<StatusResponse>(MethodType.Post, "favorites/destroy", parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET followers.
    /// </summary>
    public partial class Followers : ApiProviderBase
    {
        internal Followers(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> IdsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "followers/ids", parameters);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> IdsAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "followers/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> IdsAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "followers/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cursor">semi-optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> IdsAsync(long user_id, long? cursor = null, int? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(count != null) parameters.Add("count", count);
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "followers/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cursor">semi-optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> IdsAsync(string screen_name, long? cursor = null, int? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(count != null) parameters.Add("count", count);
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "followers/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user objects for users following the specified user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_user_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "followers/list", parameters);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user objects for users following the specified user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_user_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "followers/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user objects for users following the specified user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_user_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "followers/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user objects for users following the specified user.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cursor">semi-optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_user_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(long user_id, long? cursor = null, int? count = null, bool? skip_status = null, bool? include_user_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(count != null) parameters.Add("count", count);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_user_entities != null) parameters.Add("include_user_entities", include_user_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "followers/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user objects for users following the specified user.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cursor">semi-optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_user_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(string screen_name, long? cursor = null, int? count = null, bool? skip_status = null, bool? include_user_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(count != null) parameters.Add("count", count);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_user_entities != null) parameters.Add("include_user_entities", include_user_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "followers/list", parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET friends.
    /// </summary>
    public partial class Friends : ApiProviderBase
    {
        internal Friends(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
        /// <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
        /// <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
        /// <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> IdsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "friends/ids", parameters);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
        /// <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
        /// <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
        /// <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> IdsAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "friends/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
        /// <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
        /// <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
        /// <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> IdsAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "friends/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
        /// <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
        /// <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
        /// <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cursor">semi-optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> IdsAsync(long user_id, long? cursor = null, int? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(count != null) parameters.Add("count", count);
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "friends/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
        /// <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
        /// <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
        /// <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cursor">semi-optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> IdsAsync(string screen_name, long? cursor = null, int? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(count != null) parameters.Add("count", count);
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "friends/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
        /// <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
        /// <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_user_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "friends/list", parameters);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
        /// <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
        /// <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_user_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "friends/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
        /// <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
        /// <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_user_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "friends/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
        /// <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
        /// <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cursor">semi-optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_user_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(long user_id, long? cursor = null, int? count = null, bool? skip_status = null, bool? include_user_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(count != null) parameters.Add("count", count);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_user_entities != null) parameters.Add("include_user_entities", include_user_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "friends/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
        /// <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
        /// <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cursor">semi-optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_user_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(string screen_name, long? cursor = null, int? count = null, bool? skip_status = null, bool? include_user_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(count != null) parameters.Add("count", count);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_user_entities != null) parameters.Add("include_user_entities", include_user_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "friends/list", parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST friendships.
    /// </summary>
    public partial class Friendships : ApiProviderBase
    {
        internal Friendships(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
        /// <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The IDs.</returns>
        public Task<ListedResponse<long>> NoRetweetsIdsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<long>(MethodType.Get, "friendships/no_retweets/ids", parameters);
        }

        /// <summary>
        /// <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
        /// <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<ListedResponse<long>> NoRetweetsIdsAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<long>(MethodType.Get, "friendships/no_retweets/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
        /// <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<ListedResponse<long>> NoRetweetsIdsAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<long>(MethodType.Get, "friendships/no_retweets/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
        /// <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<ListedResponse<long>> NoRetweetsIdsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            return this.Tokens.AccessApiArrayAsync<long>(MethodType.Get, "friendships/no_retweets/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> IncomingAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "friendships/incoming", parameters);
        }

        /// <summary>
        /// <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> IncomingAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "friendships/incoming", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> IncomingAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "friendships/incoming", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
        /// </summary>
        /// <param name="cursor">semi-optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> IncomingAsync(long? cursor = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(cursor != null) parameters.Add("cursor", cursor);
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "friendships/incoming", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> OutgoingAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "friendships/outgoing", parameters);
        }

        /// <summary>
        /// <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> OutgoingAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "friendships/outgoing", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> OutgoingAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "friendships/outgoing", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
        /// </summary>
        /// <param name="cursor">semi-optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> OutgoingAsync(long? cursor = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(cursor != null) parameters.Add("cursor", cursor);
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "friendships/outgoing", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
        /// <para>Values for connections can be: following, following_requested, followed_by, none.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The friendships.</returns>
        public Task<ListedResponse<Friendship>> LookupAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<Friendship>(MethodType.Get, "friendships/lookup", parameters);
        }

        /// <summary>
        /// <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
        /// <para>Values for connections can be: following, following_requested, followed_by, none.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The friendships.</returns>
        public Task<ListedResponse<Friendship>> LookupAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Friendship>(MethodType.Get, "friendships/lookup", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
        /// <para>Values for connections can be: following, following_requested, followed_by, none.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The friendships.</returns>
        public Task<ListedResponse<Friendship>> LookupAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Friendship>(MethodType.Get, "friendships/lookup", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
        /// <para>Values for connections can be: following, following_requested, followed_by, none.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The friendships.</returns>
        public Task<ListedResponse<Friendship>> LookupAsync(IEnumerable<string> screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            return this.Tokens.AccessApiArrayAsync<Friendship>(MethodType.Get, "friendships/lookup", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
        /// <para>Values for connections can be: following, following_requested, followed_by, none.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The friendships.</returns>
        public Task<ListedResponse<Friendship>> LookupAsync(IEnumerable<long> user_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(user_id == null) throw new ArgumentNullException("user_id");
            parameters.Add("user_id", user_id);
            return this.Tokens.AccessApiArrayAsync<Friendship>(MethodType.Get, "friendships/lookup", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns detailed information about the relationship between two arbitrary users.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> source_id (any one is required)</para>
        /// <para>- <c>string</c> source_screen_name (any one is required)</para>
        /// <para>- <c>long</c> target_id (any one is required)</para>
        /// <para>- <c>string</c> target_screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The relationship.</returns>
        public Task<Relationship> ShowAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Relationship>(MethodType.Get, "friendships/show", parameters, "relationship");
        }

        /// <summary>
        /// <para>Returns detailed information about the relationship between two arbitrary users.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> source_id (any one is required)</para>
        /// <para>- <c>string</c> source_screen_name (any one is required)</para>
        /// <para>- <c>long</c> target_id (any one is required)</para>
        /// <para>- <c>string</c> target_screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The relationship.</returns>
        public Task<Relationship> ShowAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Relationship>(MethodType.Get, "friendships/show", parameters, cancellationToken, "relationship");
        }

        /// <summary>
        /// <para>Returns detailed information about the relationship between two arbitrary users.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> source_id (any one is required)</para>
        /// <para>- <c>string</c> source_screen_name (any one is required)</para>
        /// <para>- <c>long</c> target_id (any one is required)</para>
        /// <para>- <c>string</c> target_screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The relationship.</returns>
        public Task<Relationship> ShowAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Relationship>(MethodType.Get, "friendships/show", parameters, cancellationToken, "relationship");
        }

        /// <summary>
        /// <para>Returns detailed information about the relationship between two arbitrary users.</para>
        /// </summary>
        /// <param name="target_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The relationship.</returns>
        public Task<Relationship> ShowAsync(long target_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("target_id", target_id);
            return this.Tokens.AccessApiAsync<Relationship>(MethodType.Get, "friendships/show", parameters, cancellationToken, "relationship");
        }

        /// <summary>
        /// <para>Returns detailed information about the relationship between two arbitrary users.</para>
        /// </summary>
        /// <param name="target_screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The relationship.</returns>
        public Task<Relationship> ShowAsync(string target_screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(target_screen_name == null) throw new ArgumentNullException("target_screen_name");
            parameters.Add("target_screen_name", target_screen_name);
            return this.Tokens.AccessApiAsync<Relationship>(MethodType.Get, "friendships/show", parameters, cancellationToken, "relationship");
        }

        /// <summary>
        /// <para>Returns detailed information about the relationship between two arbitrary users.</para>
        /// </summary>
        /// <param name="source_id">any one is required.</param>
        /// <param name="target_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The relationship.</returns>
        public Task<Relationship> ShowAsync(long source_id, long target_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("source_id", source_id);
            parameters.Add("target_id", target_id);
            return this.Tokens.AccessApiAsync<Relationship>(MethodType.Get, "friendships/show", parameters, cancellationToken, "relationship");
        }

        /// <summary>
        /// <para>Returns detailed information about the relationship between two arbitrary users.</para>
        /// </summary>
        /// <param name="source_id">any one is required.</param>
        /// <param name="target_screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The relationship.</returns>
        public Task<Relationship> ShowAsync(long source_id, string target_screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("source_id", source_id);
            if(target_screen_name == null) throw new ArgumentNullException("target_screen_name");
            parameters.Add("target_screen_name", target_screen_name);
            return this.Tokens.AccessApiAsync<Relationship>(MethodType.Get, "friendships/show", parameters, cancellationToken, "relationship");
        }

        /// <summary>
        /// <para>Returns detailed information about the relationship between two arbitrary users.</para>
        /// </summary>
        /// <param name="source_screen_name">any one is required.</param>
        /// <param name="target_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The relationship.</returns>
        public Task<Relationship> ShowAsync(string source_screen_name, long target_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(source_screen_name == null) throw new ArgumentNullException("source_screen_name");
            parameters.Add("source_screen_name", source_screen_name);
            parameters.Add("target_id", target_id);
            return this.Tokens.AccessApiAsync<Relationship>(MethodType.Get, "friendships/show", parameters, cancellationToken, "relationship");
        }

        /// <summary>
        /// <para>Returns detailed information about the relationship between two arbitrary users.</para>
        /// </summary>
        /// <param name="source_screen_name">any one is required.</param>
        /// <param name="target_screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The relationship.</returns>
        public Task<Relationship> ShowAsync(string source_screen_name, string target_screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(source_screen_name == null) throw new ArgumentNullException("source_screen_name");
            parameters.Add("source_screen_name", source_screen_name);
            if(target_screen_name == null) throw new ArgumentNullException("target_screen_name");
            parameters.Add("target_screen_name", target_screen_name);
            return this.Tokens.AccessApiAsync<Relationship>(MethodType.Get, "friendships/show", parameters, cancellationToken, "relationship");
        }

        /// <summary>
        /// <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
        /// <para>Returns the befriended user in the requested format when successful.</para>
        /// <para>Returns a string describing the failure condition when unsuccessful.</para>
        /// <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> follow (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> CreateAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "friendships/create", parameters);
        }

        /// <summary>
        /// <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
        /// <para>Returns the befriended user in the requested format when successful.</para>
        /// <para>Returns a string describing the failure condition when unsuccessful.</para>
        /// <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> follow (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> CreateAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "friendships/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
        /// <para>Returns the befriended user in the requested format when successful.</para>
        /// <para>Returns a string describing the failure condition when unsuccessful.</para>
        /// <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> follow (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> CreateAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "friendships/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
        /// <para>Returns the befriended user in the requested format when successful.</para>
        /// <para>Returns a string describing the failure condition when unsuccessful.</para>
        /// <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="follow">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> CreateAsync(long user_id, bool? follow = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(follow != null) parameters.Add("follow", follow);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "friendships/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
        /// <para>Returns the befriended user in the requested format when successful.</para>
        /// <para>Returns a string describing the failure condition when unsuccessful.</para>
        /// <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="follow">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> CreateAsync(string screen_name, bool? follow = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(follow != null) parameters.Add("follow", follow);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "friendships/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
        /// <para>Returns the unfollowed user in the requested format when successful.</para>
        /// <para>Returns a string describing the failure condition when unsuccessful.</para>
        /// <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> DestroyAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "friendships/destroy", parameters);
        }

        /// <summary>
        /// <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
        /// <para>Returns the unfollowed user in the requested format when successful.</para>
        /// <para>Returns a string describing the failure condition when unsuccessful.</para>
        /// <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> DestroyAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "friendships/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
        /// <para>Returns the unfollowed user in the requested format when successful.</para>
        /// <para>Returns a string describing the failure condition when unsuccessful.</para>
        /// <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> DestroyAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "friendships/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
        /// <para>Returns the unfollowed user in the requested format when successful.</para>
        /// <para>Returns a string describing the failure condition when unsuccessful.</para>
        /// <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> DestroyAsync(long user_id, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "friendships/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
        /// <para>Returns the unfollowed user in the requested format when successful.</para>
        /// <para>Returns a string describing the failure condition when unsuccessful.</para>
        /// <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> DestroyAsync(string screen_name, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "friendships/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> device (optional)</para>
        /// <para>- <c>bool</c> retweets (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The relationship.</returns>
        public Task<Relationship> UpdateAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Relationship>(MethodType.Post, "friendships/update", parameters, "relationship");
        }

        /// <summary>
        /// <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> device (optional)</para>
        /// <para>- <c>bool</c> retweets (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The relationship.</returns>
        public Task<Relationship> UpdateAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Relationship>(MethodType.Post, "friendships/update", parameters, cancellationToken, "relationship");
        }

        /// <summary>
        /// <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> device (optional)</para>
        /// <para>- <c>bool</c> retweets (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The relationship.</returns>
        public Task<Relationship> UpdateAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Relationship>(MethodType.Post, "friendships/update", parameters, cancellationToken, "relationship");
        }

        /// <summary>
        /// <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="device">optional.</param>
        /// <param name="retweets">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The relationship.</returns>
        public Task<Relationship> UpdateAsync(long user_id, bool? device = null, bool? retweets = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(device != null) parameters.Add("device", device);
            if(retweets != null) parameters.Add("retweets", retweets);
            return this.Tokens.AccessApiAsync<Relationship>(MethodType.Post, "friendships/update", parameters, cancellationToken, "relationship");
        }

        /// <summary>
        /// <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="device">optional.</param>
        /// <param name="retweets">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The relationship.</returns>
        public Task<Relationship> UpdateAsync(string screen_name, bool? device = null, bool? retweets = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(device != null) parameters.Add("device", device);
            if(retweets != null) parameters.Add("retweets", retweets);
            return this.Tokens.AccessApiAsync<Relationship>(MethodType.Post, "friendships/update", parameters, cancellationToken, "relationship");
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST geo.
    /// </summary>
    public partial class Geo : ApiProviderBase
    {
        internal Geo(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns all the information about a known place.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> place_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The place.</returns>
        public Task<PlaceResponse> IdAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessParameterReservedApiAsync<PlaceResponse>(MethodType.Get, "geo/id/{place_id}", new [] { "place_id" }, InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Returns all the information about a known place.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> place_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The place.</returns>
        public Task<PlaceResponse> IdAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<PlaceResponse>(MethodType.Get, "geo/id/{place_id}", new [] { "place_id" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns all the information about a known place.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> place_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The place.</returns>
        public Task<PlaceResponse> IdAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<PlaceResponse>(MethodType.Get, "geo/id/{place_id}", new [] { "place_id" }, InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Returns all the information about a known place.</para>
        /// </summary>
        /// <param name="place_id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The place.</returns>
        public Task<PlaceResponse> IdAsync(string place_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(place_id == null) throw new ArgumentNullException("place_id");
            parameters.Add("place_id", place_id);
            return this.Tokens.AccessParameterReservedApiAsync<PlaceResponse>(MethodType.Get, "geo/id/{place_id}", new [] { "place_id" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Locates places near the given coordinates which are similar in name.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>double</c> lat (required)</para>
        /// <para>- <c>double</c> long (required)</para>
        /// <para>- <c>string</c> name (required)</para>
        /// <para>- <c>string</c> contained_within (optional)</para>
        /// <para>- <c>string</c> street_address (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>Places and the token</returns>
        public Task<GeoResult> SimilarPlacesAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<GeoResult>(MethodType.Get, "geo/similar_places", parameters, "result");
        }

        /// <summary>
        /// <para>Locates places near the given coordinates which are similar in name.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>double</c> lat (required)</para>
        /// <para>- <c>double</c> long (required)</para>
        /// <para>- <c>string</c> name (required)</para>
        /// <para>- <c>string</c> contained_within (optional)</para>
        /// <para>- <c>string</c> street_address (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Places and the token</returns>
        public Task<GeoResult> SimilarPlacesAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<GeoResult>(MethodType.Get, "geo/similar_places", parameters, cancellationToken, "result");
        }

        /// <summary>
        /// <para>Locates places near the given coordinates which are similar in name.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>double</c> lat (required)</para>
        /// <para>- <c>double</c> long (required)</para>
        /// <para>- <c>string</c> name (required)</para>
        /// <para>- <c>string</c> contained_within (optional)</para>
        /// <para>- <c>string</c> street_address (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Places and the token</returns>
        public Task<GeoResult> SimilarPlacesAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<GeoResult>(MethodType.Get, "geo/similar_places", parameters, cancellationToken, "result");
        }

        /// <summary>
        /// <para>Locates places near the given coordinates which are similar in name.</para>
        /// </summary>
        /// <param name="lat">required.</param>
        /// <param name="long">required.</param>
        /// <param name="name">required.</param>
        /// <param name="contained_within">optional.</param>
        /// <param name="street_address">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Places and the token</returns>
        public Task<GeoResult> SimilarPlacesAsync(double lat, double @long, string name, string contained_within = null, string street_address = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("lat", lat);
            parameters.Add("long", @long);
            if(name == null) throw new ArgumentNullException("name");
            parameters.Add("name", name);
            if(contained_within != null) parameters.Add("contained_within", contained_within);
            if(street_address != null) parameters.Add("street_address", street_address);
            return this.Tokens.AccessApiAsync<GeoResult>(MethodType.Get, "geo/similar_places", parameters, cancellationToken, "result");
        }

        /// <summary>
        /// <para>Search for places that can be attached to a statuses/update.</para>
        /// <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>double</c> lat (optional)</para>
        /// <para>- <c>double</c> long (optional)</para>
        /// <para>- <c>string</c> query (optional)</para>
        /// <para>- <c>string</c> ip (optional)</para>
        /// <para>- <c>string</c> granularity (optional)</para>
        /// <para>- <c>string</c> accuracy (optional)</para>
        /// <para>- <c>int</c> max_results (optional)</para>
        /// <para>- <c>string</c> contained_within (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>Places.</returns>
        public Task<GeoResult> SearchAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<GeoResult>(MethodType.Get, "geo/search", parameters, "result");
        }

        /// <summary>
        /// <para>Search for places that can be attached to a statuses/update.</para>
        /// <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>double</c> lat (optional)</para>
        /// <para>- <c>double</c> long (optional)</para>
        /// <para>- <c>string</c> query (optional)</para>
        /// <para>- <c>string</c> ip (optional)</para>
        /// <para>- <c>string</c> granularity (optional)</para>
        /// <para>- <c>string</c> accuracy (optional)</para>
        /// <para>- <c>int</c> max_results (optional)</para>
        /// <para>- <c>string</c> contained_within (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Places.</returns>
        public Task<GeoResult> SearchAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<GeoResult>(MethodType.Get, "geo/search", parameters, cancellationToken, "result");
        }

        /// <summary>
        /// <para>Search for places that can be attached to a statuses/update.</para>
        /// <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>double</c> lat (optional)</para>
        /// <para>- <c>double</c> long (optional)</para>
        /// <para>- <c>string</c> query (optional)</para>
        /// <para>- <c>string</c> ip (optional)</para>
        /// <para>- <c>string</c> granularity (optional)</para>
        /// <para>- <c>string</c> accuracy (optional)</para>
        /// <para>- <c>int</c> max_results (optional)</para>
        /// <para>- <c>string</c> contained_within (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Places.</returns>
        public Task<GeoResult> SearchAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<GeoResult>(MethodType.Get, "geo/search", parameters, cancellationToken, "result");
        }

        /// <summary>
        /// <para>Search for places that can be attached to a statuses/update.</para>
        /// <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
        /// </summary>
        /// <param name="lat">optional.</param>
        /// <param name="long">optional.</param>
        /// <param name="query">optional.</param>
        /// <param name="ip">optional.</param>
        /// <param name="granularity">optional.</param>
        /// <param name="accuracy">optional.</param>
        /// <param name="max_results">optional.</param>
        /// <param name="contained_within">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Places.</returns>
        public Task<GeoResult> SearchAsync(double? lat = null, double? @long = null, string query = null, string ip = null, string granularity = null, string accuracy = null, int? max_results = null, string contained_within = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(lat != null) parameters.Add("lat", lat);
            if(@long != null) parameters.Add("long", @long);
            if(query != null) parameters.Add("query", query);
            if(ip != null) parameters.Add("ip", ip);
            if(granularity != null) parameters.Add("granularity", granularity);
            if(accuracy != null) parameters.Add("accuracy", accuracy);
            if(max_results != null) parameters.Add("max_results", max_results);
            if(contained_within != null) parameters.Add("contained_within", contained_within);
            return this.Tokens.AccessApiAsync<GeoResult>(MethodType.Get, "geo/search", parameters, cancellationToken, "result");
        }

        /// <summary>
        /// <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
        /// <para>This request is an informative call and will deliver generalized results about geography.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>double</c> lat (required)</para>
        /// <para>- <c>double</c> long (required)</para>
        /// <para>- <c>string</c> accuracy (optional)</para>
        /// <para>- <c>string</c> granularity (optional)</para>
        /// <para>- <c>int</c> max_results (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>Places.</returns>
        public Task<GeoResult> ReverseGeocodeAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<GeoResult>(MethodType.Get, "geo/reverse_geocode", parameters, "result");
        }

        /// <summary>
        /// <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
        /// <para>This request is an informative call and will deliver generalized results about geography.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>double</c> lat (required)</para>
        /// <para>- <c>double</c> long (required)</para>
        /// <para>- <c>string</c> accuracy (optional)</para>
        /// <para>- <c>string</c> granularity (optional)</para>
        /// <para>- <c>int</c> max_results (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Places.</returns>
        public Task<GeoResult> ReverseGeocodeAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<GeoResult>(MethodType.Get, "geo/reverse_geocode", parameters, cancellationToken, "result");
        }

        /// <summary>
        /// <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
        /// <para>This request is an informative call and will deliver generalized results about geography.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>double</c> lat (required)</para>
        /// <para>- <c>double</c> long (required)</para>
        /// <para>- <c>string</c> accuracy (optional)</para>
        /// <para>- <c>string</c> granularity (optional)</para>
        /// <para>- <c>int</c> max_results (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Places.</returns>
        public Task<GeoResult> ReverseGeocodeAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<GeoResult>(MethodType.Get, "geo/reverse_geocode", parameters, cancellationToken, "result");
        }

        /// <summary>
        /// <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
        /// <para>This request is an informative call and will deliver generalized results about geography.</para>
        /// </summary>
        /// <param name="lat">required.</param>
        /// <param name="long">required.</param>
        /// <param name="accuracy">optional.</param>
        /// <param name="granularity">optional.</param>
        /// <param name="max_results">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Places.</returns>
        public Task<GeoResult> ReverseGeocodeAsync(double lat, double @long, string accuracy = null, string granularity = null, int? max_results = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("lat", lat);
            parameters.Add("long", @long);
            if(accuracy != null) parameters.Add("accuracy", accuracy);
            if(granularity != null) parameters.Add("granularity", granularity);
            if(max_results != null) parameters.Add("max_results", max_results);
            return this.Tokens.AccessApiAsync<GeoResult>(MethodType.Get, "geo/reverse_geocode", parameters, cancellationToken, "result");
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET help.
    /// </summary>
    public partial class Help : ApiProviderBase
    {
        internal Help(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>Configurations.</returns>
        public Task<Configurations> ConfigurationAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Configurations>(MethodType.Get, "help/configuration", parameters);
        }

        /// <summary>
        /// <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Configurations.</returns>
        public Task<Configurations> ConfigurationAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Configurations>(MethodType.Get, "help/configuration", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Configurations.</returns>
        public Task<Configurations> ConfigurationAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Configurations>(MethodType.Get, "help/configuration", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Configurations.</returns>
        public Task<Configurations> ConfigurationAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            return this.Tokens.AccessApiAsync<Configurations>(MethodType.Get, "help/configuration", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the list of languages supported by Twitter along with the language code supported by Twitter.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>Languages.</returns>
        public Task<ListedResponse<Language>> LanguagesAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<Language>(MethodType.Get, "help/languages", parameters);
        }

        /// <summary>
        /// <para>Returns the list of languages supported by Twitter along with the language code supported by Twitter.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Languages.</returns>
        public Task<ListedResponse<Language>> LanguagesAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Language>(MethodType.Get, "help/languages", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the list of languages supported by Twitter along with the language code supported by Twitter.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Languages.</returns>
        public Task<ListedResponse<Language>> LanguagesAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Language>(MethodType.Get, "help/languages", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the list of languages supported by Twitter along with the language code supported by Twitter.</para>
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Languages.</returns>
        public Task<ListedResponse<Language>> LanguagesAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            return this.Tokens.AccessApiArrayAsync<Language>(MethodType.Get, "help/languages", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns Twitter’s Privacy Policy.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The sentense.</returns>
        public Task<StringResponse> PrivacyAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<StringResponse>(MethodType.Get, "help/privacy", parameters);
        }

        /// <summary>
        /// <para>Returns Twitter’s Privacy Policy.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The sentense.</returns>
        public Task<StringResponse> PrivacyAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<StringResponse>(MethodType.Get, "help/privacy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns Twitter’s Privacy Policy.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The sentense.</returns>
        public Task<StringResponse> PrivacyAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<StringResponse>(MethodType.Get, "help/privacy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns Twitter’s Privacy Policy.</para>
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The sentense.</returns>
        public Task<StringResponse> PrivacyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            return this.Tokens.AccessApiAsync<StringResponse>(MethodType.Get, "help/privacy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the Twitter Terms of Service.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The sentense.</returns>
        public Task<StringResponse> TosAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<StringResponse>(MethodType.Get, "help/tos", parameters);
        }

        /// <summary>
        /// <para>Returns the Twitter Terms of Service.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The sentense.</returns>
        public Task<StringResponse> TosAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<StringResponse>(MethodType.Get, "help/tos", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the Twitter Terms of Service.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The sentense.</returns>
        public Task<StringResponse> TosAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<StringResponse>(MethodType.Get, "help/tos", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the Twitter Terms of Service.</para>
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The sentense.</returns>
        public Task<StringResponse> TosAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            return this.Tokens.AccessApiAsync<StringResponse>(MethodType.Get, "help/tos", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> resources (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        public Task<DictionaryResponse<string, Dictionary<string,RateLimit>>> RateLimitStatusAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiDictionaryAsync<string, Dictionary<string,RateLimit>>(MethodType.Get, "application/rate_limit_status", parameters, "resources");
        }

        /// <summary>
        /// <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> resources (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task<DictionaryResponse<string, Dictionary<string,RateLimit>>> RateLimitStatusAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiDictionaryAsync<string, Dictionary<string,RateLimit>>(MethodType.Get, "application/rate_limit_status", parameters, cancellationToken, "resources");
        }

        /// <summary>
        /// <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> resources (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task<DictionaryResponse<string, Dictionary<string,RateLimit>>> RateLimitStatusAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiDictionaryAsync<string, Dictionary<string,RateLimit>>(MethodType.Get, "application/rate_limit_status", parameters, cancellationToken, "resources");
        }

        /// <summary>
        /// <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task<DictionaryResponse<string, Dictionary<string,RateLimit>>> RateLimitStatusAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            return this.Tokens.AccessApiDictionaryAsync<string, Dictionary<string,RateLimit>>(MethodType.Get, "application/rate_limit_status", parameters, cancellationToken, "resources");
        }

        /// <summary>
        /// <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
        /// </summary>
        /// <param name="resources">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task<DictionaryResponse<string, Dictionary<string,RateLimit>>> RateLimitStatusAsync(string resources, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(resources == null) throw new ArgumentNullException("resources");
            parameters.Add("resources", resources);
            return this.Tokens.AccessApiDictionaryAsync<string, Dictionary<string,RateLimit>>(MethodType.Get, "application/rate_limit_status", parameters, cancellationToken, "resources");
        }

        /// <summary>
        /// <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
        /// </summary>
        /// <param name="resources">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task<DictionaryResponse<string, Dictionary<string,RateLimit>>> RateLimitStatusAsync(IEnumerable<string> resources, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(resources == null) throw new ArgumentNullException("resources");
            parameters.Add("resources", resources);
            return this.Tokens.AccessApiDictionaryAsync<string, Dictionary<string,RateLimit>>(MethodType.Get, "application/rate_limit_status", parameters, cancellationToken, "resources");
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST lists.
    /// </summary>
    public partial class Lists : ApiProviderBase
    {
        internal Lists(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> reverse (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The lists.</returns>
        public Task<ListedResponse<List>> ListAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<List>(MethodType.Get, "lists/list", parameters);
        }

        /// <summary>
        /// <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> reverse (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<ListedResponse<List>> ListAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<List>(MethodType.Get, "lists/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> reverse (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<ListedResponse<List>> ListAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<List>(MethodType.Get, "lists/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
        /// </summary>
        /// <param name="reverse">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<ListedResponse<List>> ListAsync(bool? reverse = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(reverse != null) parameters.Add("reverse", reverse);
            return this.Tokens.AccessApiArrayAsync<List>(MethodType.Get, "lists/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="reverse">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<ListedResponse<List>> ListAsync(long user_id, bool? reverse = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(reverse != null) parameters.Add("reverse", reverse);
            return this.Tokens.AccessApiArrayAsync<List>(MethodType.Get, "lists/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="reverse">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<ListedResponse<List>> ListAsync(string screen_name, bool? reverse = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(reverse != null) parameters.Add("reverse", reverse);
            return this.Tokens.AccessApiArrayAsync<List>(MethodType.Get, "lists/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the lists the specified user has been added to.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> MembershipsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/memberships", parameters);
        }

        /// <summary>
        /// <para>Returns the lists the specified user has been added to.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> MembershipsAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/memberships", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the lists the specified user has been added to.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> MembershipsAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/memberships", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the lists the specified user has been added to.</para>
        /// </summary>
        /// <param name="count">optional.</param>
        /// <param name="cursor">optional.</param>
        /// <param name="filter_to_owned_lists">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> MembershipsAsync(int? count = null, long? cursor = null, bool? filter_to_owned_lists = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(filter_to_owned_lists != null) parameters.Add("filter_to_owned_lists", filter_to_owned_lists);
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/memberships", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the lists the specified user has been added to.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="count">optional.</param>
        /// <param name="cursor">optional.</param>
        /// <param name="filter_to_owned_lists">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> MembershipsAsync(long user_id, int? count = null, long? cursor = null, bool? filter_to_owned_lists = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(filter_to_owned_lists != null) parameters.Add("filter_to_owned_lists", filter_to_owned_lists);
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/memberships", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the lists the specified user has been added to.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="count">optional.</param>
        /// <param name="cursor">optional.</param>
        /// <param name="filter_to_owned_lists">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> MembershipsAsync(string screen_name, int? count = null, long? cursor = null, bool? filter_to_owned_lists = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(filter_to_owned_lists != null) parameters.Add("filter_to_owned_lists", filter_to_owned_lists);
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/memberships", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the lists owned by the specified Twitter user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> OwnershipsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/ownerships", parameters);
        }

        /// <summary>
        /// <para>Returns the lists owned by the specified Twitter user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> OwnershipsAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/ownerships", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the lists owned by the specified Twitter user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> OwnershipsAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/ownerships", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the lists owned by the specified Twitter user.</para>
        /// </summary>
        /// <param name="count">optional.</param>
        /// <param name="cursor">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> OwnershipsAsync(int? count = null, long? cursor = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/ownerships", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the lists owned by the specified Twitter user.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="count">optional.</param>
        /// <param name="cursor">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> OwnershipsAsync(long user_id, int? count = null, long? cursor = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/ownerships", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the lists owned by the specified Twitter user.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="count">optional.</param>
        /// <param name="cursor">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> OwnershipsAsync(string screen_name, int? count = null, long? cursor = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/ownerships", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> ShowAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Get, "lists/show", parameters);
        }

        /// <summary>
        /// <para>Returns the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> ShowAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Get, "lists/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> ShowAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Get, "lists/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the specified list.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> ShowAsync(long list_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Get, "lists/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> ShowAsync(string slug, string owner_screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Get, "lists/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> ShowAsync(string slug, long owner_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Get, "lists/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Obtain a collection of the lists the specified user is subscribed to.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> SubscriptionsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/subscriptions", parameters);
        }

        /// <summary>
        /// <para>Obtain a collection of the lists the specified user is subscribed to.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> SubscriptionsAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/subscriptions", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Obtain a collection of the lists the specified user is subscribed to.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> SubscriptionsAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/subscriptions", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Obtain a collection of the lists the specified user is subscribed to.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="count">optional.</param>
        /// <param name="cursor">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> SubscriptionsAsync(long user_id, int? count = null, long? cursor = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/subscriptions", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Obtain a collection of the lists the specified user is subscribed to.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="count">optional.</param>
        /// <param name="cursor">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The lists.</returns>
        public Task<Cursored<List>> SubscriptionsAsync(string screen_name, int? count = null, long? cursor = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            return this.Tokens.AccessApiAsync<Cursored<List>>(MethodType.Get, "lists/subscriptions", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a timeline of tweets authored by members of the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_rts (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> StatusesAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "lists/statuses", parameters);
        }

        /// <summary>
        /// <para>Returns a timeline of tweets authored by members of the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_rts (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> StatusesAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "lists/statuses", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a timeline of tweets authored by members of the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_rts (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> StatusesAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "lists/statuses", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a timeline of tweets authored by members of the specified list.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="since_id">optional.</param>
        /// <param name="max_id">optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_rts">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> StatusesAsync(long list_id, long? since_id = null, long? max_id = null, int? count = null, bool? include_entities = null, bool? include_rts = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            if(since_id != null) parameters.Add("since_id", since_id);
            if(max_id != null) parameters.Add("max_id", max_id);
            if(count != null) parameters.Add("count", count);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_rts != null) parameters.Add("include_rts", include_rts);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "lists/statuses", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a timeline of tweets authored by members of the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="since_id">optional.</param>
        /// <param name="max_id">optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_rts">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> StatusesAsync(string slug, string owner_screen_name, long? since_id = null, long? max_id = null, int? count = null, bool? include_entities = null, bool? include_rts = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            if(since_id != null) parameters.Add("since_id", since_id);
            if(max_id != null) parameters.Add("max_id", max_id);
            if(count != null) parameters.Add("count", count);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_rts != null) parameters.Add("include_rts", include_rts);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "lists/statuses", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a timeline of tweets authored by members of the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="since_id">optional.</param>
        /// <param name="max_id">optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_rts">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> StatusesAsync(string slug, long owner_id, long? since_id = null, long? max_id = null, int? count = null, bool? include_entities = null, bool? include_rts = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            if(since_id != null) parameters.Add("since_id", since_id);
            if(max_id != null) parameters.Add("max_id", max_id);
            if(count != null) parameters.Add("count", count);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_rts != null) parameters.Add("include_rts", include_rts);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "lists/statuses", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Creates a new list for the authenticated user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> name (required)</para>
        /// <para>- <c>string</c> mode (optional)</para>
        /// <para>- <c>string</c> description (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/create", parameters);
        }

        /// <summary>
        /// <para>Creates a new list for the authenticated user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> name (required)</para>
        /// <para>- <c>string</c> mode (optional)</para>
        /// <para>- <c>string</c> description (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Creates a new list for the authenticated user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> name (required)</para>
        /// <para>- <c>string</c> mode (optional)</para>
        /// <para>- <c>string</c> description (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Creates a new list for the authenticated user.</para>
        /// </summary>
        /// <param name="name">required.</param>
        /// <param name="mode">optional.</param>
        /// <param name="description">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(string name, string mode = null, string description = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(name == null) throw new ArgumentNullException("name");
            parameters.Add("name", name);
            if(mode != null) parameters.Add("mode", mode);
            if(description != null) parameters.Add("description", description);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Deletes the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The destroyed list.</returns>
        public Task<ListResponse> DestroyAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/destroy", parameters);
        }

        /// <summary>
        /// <para>Deletes the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The destroyed list.</returns>
        public Task<ListResponse> DestroyAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Deletes the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The destroyed list.</returns>
        public Task<ListResponse> DestroyAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Deletes the specified list.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The destroyed list.</returns>
        public Task<ListResponse> DestroyAsync(long list_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Deletes the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The destroyed list.</returns>
        public Task<ListResponse> DestroyAsync(string slug, string owner_screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Deletes the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The destroyed list.</returns>
        public Task<ListResponse> DestroyAsync(string slug, long owner_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>string</c> name (optional)</para>
        /// <para>- <c>string</c> mode (optional)</para>
        /// <para>- <c>string</c> description (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> UpdateAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/update", parameters);
        }

        /// <summary>
        /// <para>Updates the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>string</c> name (optional)</para>
        /// <para>- <c>string</c> mode (optional)</para>
        /// <para>- <c>string</c> description (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> UpdateAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/update", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>string</c> name (optional)</para>
        /// <para>- <c>string</c> mode (optional)</para>
        /// <para>- <c>string</c> description (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> UpdateAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/update", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the specified list.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="name">optional.</param>
        /// <param name="mode">optional.</param>
        /// <param name="description">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> UpdateAsync(long list_id, string name = null, string mode = null, string description = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            if(name != null) parameters.Add("name", name);
            if(mode != null) parameters.Add("mode", mode);
            if(description != null) parameters.Add("description", description);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/update", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="name">optional.</param>
        /// <param name="mode">optional.</param>
        /// <param name="description">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> UpdateAsync(string slug, string owner_screen_name, string name = null, string mode = null, string description = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            if(name != null) parameters.Add("name", name);
            if(mode != null) parameters.Add("mode", mode);
            if(description != null) parameters.Add("description", description);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/update", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="name">optional.</param>
        /// <param name="mode">optional.</param>
        /// <param name="description">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> UpdateAsync(string slug, long owner_id, string name = null, string mode = null, string description = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            if(name != null) parameters.Add("name", name);
            if(mode != null) parameters.Add("mode", mode);
            if(description != null) parameters.Add("description", description);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/update", parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST lists/members.
    /// </summary>
    public partial class ListsMembers : ApiProviderBase
    {
        internal ListsMembers(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns the members of the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "lists/members", parameters);
        }

        /// <summary>
        /// <para>Returns the members of the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "lists/members", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the members of the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "lists/members", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the members of the specified list.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="count">optional.</param>
        /// <param name="cursor">semi-optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(long list_id, int? count = null, long? cursor = null, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "lists/members", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the members of the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="count">optional.</param>
        /// <param name="cursor">semi-optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(string slug, string owner_screen_name, int? count = null, long? cursor = null, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "lists/members", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the members of the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="count">optional.</param>
        /// <param name="cursor">semi-optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(string slug, long owner_id, int? count = null, long? cursor = null, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "lists/members", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check if the specified user is a member of the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/members/show", parameters);
        }

        /// <summary>
        /// <para>Check if the specified user is a member of the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/members/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check if the specified user is a member of the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/members/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check if the specified user is a member of the specified list.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(long list_id, long user_id, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            parameters.Add("user_id", user_id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/members/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check if the specified user is a member of the specified list.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(long list_id, string screen_name, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/members/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check if the specified user is a member of the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(string slug, string owner_screen_name, long user_id, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            parameters.Add("user_id", user_id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/members/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check if the specified user is a member of the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(string slug, string owner_screen_name, string screen_name, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/members/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check if the specified user is a member of the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(string slug, long owner_id, long user_id, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            parameters.Add("user_id", user_id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/members/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check if the specified user is a member of the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(string slug, long owner_id, string screen_name, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/members/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Add a member to a list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create", parameters);
        }

        /// <summary>
        /// <para>Add a member to a list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Add a member to a list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Add a member to a list.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(long list_id, long user_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            parameters.Add("user_id", user_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Add a member to a list.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(long list_id, string screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Add a member to a list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(string slug, string owner_screen_name, long user_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            parameters.Add("user_id", user_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Add a member to a list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(string slug, string owner_screen_name, string screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Add a member to a list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(string slug, long owner_id, long user_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            parameters.Add("user_id", user_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Add a member to a list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(string slug, long owner_id, string screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAllAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create_all", parameters);
        }

        /// <summary>
        /// <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAllAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create_all", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAllAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create_all", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAllAsync(long list_id, IEnumerable<long> user_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            if(user_id == null) throw new ArgumentNullException("user_id");
            parameters.Add("user_id", user_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create_all", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAllAsync(long list_id, IEnumerable<string> screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create_all", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAllAsync(string slug, string owner_screen_name, IEnumerable<long> user_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            if(user_id == null) throw new ArgumentNullException("user_id");
            parameters.Add("user_id", user_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create_all", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAllAsync(string slug, string owner_screen_name, IEnumerable<string> screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create_all", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAllAsync(string slug, long owner_id, IEnumerable<long> user_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            if(user_id == null) throw new ArgumentNullException("user_id");
            parameters.Add("user_id", user_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create_all", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAllAsync(string slug, long owner_id, IEnumerable<string> screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/create_all", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes the specified member from the list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy", parameters);
        }

        /// <summary>
        /// <para>Removes the specified member from the list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes the specified member from the list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes the specified member from the list.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAsync(long list_id, long user_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            parameters.Add("user_id", user_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes the specified member from the list.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAsync(long list_id, string screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes the specified member from the list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAsync(string slug, string owner_screen_name, long user_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            parameters.Add("user_id", user_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes the specified member from the list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAsync(string slug, string owner_screen_name, string screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes the specified member from the list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAsync(string slug, long owner_id, long user_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            parameters.Add("user_id", user_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes the specified member from the list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAsync(string slug, long owner_id, string screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAllAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy_all", parameters);
        }

        /// <summary>
        /// <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAllAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy_all", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAllAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy_all", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAllAsync(long list_id, IEnumerable<long> user_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            if(user_id == null) throw new ArgumentNullException("user_id");
            parameters.Add("user_id", user_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy_all", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAllAsync(long list_id, IEnumerable<string> screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy_all", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAllAsync(string slug, string owner_screen_name, IEnumerable<long> user_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            if(user_id == null) throw new ArgumentNullException("user_id");
            parameters.Add("user_id", user_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy_all", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAllAsync(string slug, string owner_screen_name, IEnumerable<string> screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy_all", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAllAsync(string slug, long owner_id, IEnumerable<long> user_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            if(user_id == null) throw new ArgumentNullException("user_id");
            parameters.Add("user_id", user_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy_all", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAllAsync(string slug, long owner_id, IEnumerable<string> screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/members/destroy_all", parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST lists/subscribers.
    /// </summary>
    public partial class ListsSubscribers : ApiProviderBase
    {
        internal ListsSubscribers(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns the subscribers of the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "lists/subscribers", parameters);
        }

        /// <summary>
        /// <para>Returns the subscribers of the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "lists/subscribers", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the subscribers of the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "lists/subscribers", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the subscribers of the specified list.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="count">optional.</param>
        /// <param name="cursor">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(long list_id, int? count = null, long? cursor = null, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "lists/subscribers", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the subscribers of the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="count">optional.</param>
        /// <param name="cursor">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(string slug, string owner_screen_name, int? count = null, long? cursor = null, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "lists/subscribers", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the subscribers of the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="count">optional.</param>
        /// <param name="cursor">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(string slug, long owner_id, int? count = null, long? cursor = null, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "lists/subscribers", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/subscribers/show", parameters);
        }

        /// <summary>
        /// <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/subscribers/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/subscribers/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(long list_id, long user_id, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            parameters.Add("user_id", user_id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/subscribers/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(long list_id, string screen_name, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/subscribers/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(string slug, string owner_screen_name, long user_id, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            parameters.Add("user_id", user_id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/subscribers/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(string slug, string owner_screen_name, string screen_name, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/subscribers/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="user_id">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(string slug, long owner_id, long user_id, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            parameters.Add("user_id", user_id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/subscribers/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(string slug, long owner_id, string screen_name, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "lists/subscribers/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Subscribes the authenticated user to the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/subscribers/create", parameters);
        }

        /// <summary>
        /// <para>Subscribes the authenticated user to the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/subscribers/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Subscribes the authenticated user to the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/subscribers/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Subscribes the authenticated user to the specified list.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(long list_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/subscribers/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Subscribes the authenticated user to the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(string slug, string owner_screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/subscribers/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Subscribes the authenticated user to the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> CreateAsync(string slug, long owner_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/subscribers/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Unsubscribes the authenticated user from the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/subscribers/destroy", parameters);
        }

        /// <summary>
        /// <para>Unsubscribes the authenticated user from the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/subscribers/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Unsubscribes the authenticated user from the specified list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> list_id (any one is required)</para>
        /// <para>- <c>string</c> slug (any one is required)</para>
        /// <para>- <c>string</c> owner_screen_name (any one is required)</para>
        /// <para>- <c>long</c> owner_id (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/subscribers/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Unsubscribes the authenticated user from the specified list.</para>
        /// </summary>
        /// <param name="list_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAsync(long list_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("list_id", list_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/subscribers/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Unsubscribes the authenticated user from the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAsync(string slug, string owner_screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(owner_screen_name == null) throw new ArgumentNullException("owner_screen_name");
            parameters.Add("owner_screen_name", owner_screen_name);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/subscribers/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Unsubscribes the authenticated user from the specified list.</para>
        /// </summary>
        /// <param name="slug">any one is required.</param>
        /// <param name="owner_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The list.</returns>
        public Task<ListResponse> DestroyAsync(string slug, long owner_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            parameters.Add("owner_id", owner_id);
            return this.Tokens.AccessApiAsync<ListResponse>(MethodType.Post, "lists/subscribers/destroy", parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of POST media.
    /// </summary>
    public partial class Media : ApiProviderBase
    {
        internal Media(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Upload media (images) to Twitter for use in a Tweet or Twitter-hosted Card.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>Stream</c> media (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
        /// <para>- <c>FileInfo</c> media (any one is required)</para>
        /// <para>- <c>string</c> media_data (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> additional_owners (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The result for the uploaded media.</returns>
        public Task<MediaUploadResult> UploadAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.UploadAsyncImpl(InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Initialize an upload.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> total_bytes (required)</para>
        /// <para>- <c>string</c> media_type (any one is required)</para>
        /// <para>- <c>UploadMediaType</c> media_type (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> additional_owners (optional)</para>
        /// <para>- <c>string</c> media_category (optional)</para>
        /// <para>- <c>bool</c> shared (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The result of INIT command.</returns>
        public Task<UploadInitCommandResult> UploadInitCommandAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.UploadInitCommandAsyncImpl(InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Initialize an upload.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> total_bytes (required)</para>
        /// <para>- <c>string</c> media_type (any one is required)</para>
        /// <para>- <c>UploadMediaType</c> media_type (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> additional_owners (optional)</para>
        /// <para>- <c>string</c> media_category (optional)</para>
        /// <para>- <c>bool</c> shared (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The result of INIT command.</returns>
        public Task<UploadInitCommandResult> UploadInitCommandAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.UploadInitCommandAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Initialize an upload.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> total_bytes (required)</para>
        /// <para>- <c>string</c> media_type (any one is required)</para>
        /// <para>- <c>UploadMediaType</c> media_type (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> additional_owners (optional)</para>
        /// <para>- <c>string</c> media_category (optional)</para>
        /// <para>- <c>bool</c> shared (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The result of INIT command.</returns>
        public Task<UploadInitCommandResult> UploadInitCommandAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.UploadInitCommandAsyncImpl(InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Initialize an upload.</para>
        /// </summary>
        /// <param name="total_bytes">required.</param>
        /// <param name="media_type">any one is required.</param>
        /// <param name="additional_owners">optional.</param>
        /// <param name="media_category">optional.</param>
        /// <param name="shared">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The result of INIT command.</returns>
        public Task<UploadInitCommandResult> UploadInitCommandAsync(int total_bytes, string media_type, IEnumerable<long> additional_owners = null, string media_category = null, bool? shared = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("total_bytes", total_bytes);
            if(media_type == null) throw new ArgumentNullException("media_type");
            parameters.Add("media_type", media_type);
            if(additional_owners != null) parameters.Add("additional_owners", additional_owners);
            if(media_category != null) parameters.Add("media_category", media_category);
            if(shared != null) parameters.Add("shared", shared);
            return this.UploadInitCommandAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Initialize an upload.</para>
        /// </summary>
        /// <param name="total_bytes">required.</param>
        /// <param name="media_type">any one is required.</param>
        /// <param name="additional_owners">optional.</param>
        /// <param name="media_category">optional.</param>
        /// <param name="shared">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The result of INIT command.</returns>
        public Task<UploadInitCommandResult> UploadInitCommandAsync(int total_bytes, UploadMediaType media_type, IEnumerable<long> additional_owners = null, string media_category = null, bool? shared = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("total_bytes", total_bytes);
            parameters.Add("media_type", media_type);
            if(additional_owners != null) parameters.Add("additional_owners", additional_owners);
            if(media_category != null) parameters.Add("media_category", media_category);
            if(shared != null) parameters.Add("shared", shared);
            return this.UploadInitCommandAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Upload(s) of chunked data.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> media_id (required)</para>
        /// <para>- <c>int</c> segment_index (required)</para>
        /// <para>- <c>Stream</c> media (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
        /// <para>- <c>FileInfo</c> media (any one is required)</para>
        /// <para>- <c>string</c> media_data (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        public Task UploadAppendCommandAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.UploadAppendCommandAsyncImpl(InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Complete the upload.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> media_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The result for the uploaded media.</returns>
        public Task<UploadFinalizeCommandResult> UploadFinalizeCommandAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.UploadFinalizeCommandAsyncImpl(InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Complete the upload.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> media_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The result for the uploaded media.</returns>
        public Task<UploadFinalizeCommandResult> UploadFinalizeCommandAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.UploadFinalizeCommandAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Complete the upload.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> media_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The result for the uploaded media.</returns>
        public Task<UploadFinalizeCommandResult> UploadFinalizeCommandAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.UploadFinalizeCommandAsyncImpl(InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Complete the upload.</para>
        /// </summary>
        /// <param name="media_id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The result for the uploaded media.</returns>
        public Task<UploadFinalizeCommandResult> UploadFinalizeCommandAsync(long media_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("media_id", media_id);
            return this.UploadFinalizeCommandAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check the processing status of the upload (for async video uploads only).</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> media_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The status of the upload.</returns>
        public Task<UploadFinalizeCommandResult> UploadStatusCommandAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.UploadStatusCommandAsyncImpl(InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Check the processing status of the upload (for async video uploads only).</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> media_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The status of the upload.</returns>
        public Task<UploadFinalizeCommandResult> UploadStatusCommandAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.UploadStatusCommandAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Check the processing status of the upload (for async video uploads only).</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> media_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The status of the upload.</returns>
        public Task<UploadFinalizeCommandResult> UploadStatusCommandAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.UploadStatusCommandAsyncImpl(InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Check the processing status of the upload (for async video uploads only).</para>
        /// </summary>
        /// <param name="media_id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The status of the upload.</returns>
        public Task<UploadFinalizeCommandResult> UploadStatusCommandAsync(long media_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("media_id", media_id);
            return this.UploadStatusCommandAsyncImpl(parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of POST media/metadata.
    /// </summary>
    public partial class MediaMetadata : ApiProviderBase
    {
        internal MediaMetadata(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Provides additional information about the uploaded media_id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> media_id (required)</para>
        /// <para>- <c>string</c> alt_text (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        public Task CreateAsync(params Expression<Func<string, object>>[] parameters)
        {
            var jm = new string[5];
            jm[0] = "{";
            jm[1] = "\"media_id\": $media_id,";
            jm[2] = "\"alt_text\": {";
            jm[3] = "\"text\": $alt_text";
            jm[4] = "}}";
            return this.CreateAsyncImpl(InternalUtils.ExpressionsToDictionary(parameters), jm, CancellationToken.None);
        }

        /// <summary>
        /// <para>Provides additional information about the uploaded media_id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> media_id (required)</para>
        /// <para>- <c>string</c> alt_text (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task CreateAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            var jm = new string[5];
            jm[0] = "{";
            jm[1] = "\"media_id\": $media_id,";
            jm[2] = "\"alt_text\": {";
            jm[3] = "\"text\": $alt_text";
            jm[4] = "}}";
            return this.CreateAsyncImpl(parameters, jm, cancellationToken);
        }

        /// <summary>
        /// <para>Provides additional information about the uploaded media_id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> media_id (required)</para>
        /// <para>- <c>string</c> alt_text (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task CreateAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            var jm = new string[5];
            jm[0] = "{";
            jm[1] = "\"media_id\": $media_id,";
            jm[2] = "\"alt_text\": {";
            jm[3] = "\"text\": $alt_text";
            jm[4] = "}}";
            return this.CreateAsyncImpl(InternalUtils.ResolveObject(parameters), jm, cancellationToken);
        }

        /// <summary>
        /// <para>Provides additional information about the uploaded media_id.</para>
        /// </summary>
        /// <param name="media_id">required.</param>
        /// <param name="alt_text">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task CreateAsync(string media_id, string alt_text, CancellationToken cancellationToken = default(CancellationToken))
        {
            var jm = new string[5];
            jm[0] = "{";
            jm[1] = "\"media_id\": $media_id,";
            jm[2] = "\"alt_text\": {";
            jm[3] = "\"text\": $alt_text";
            jm[4] = "}}";
            var parameters = new Dictionary<string, object>();
            if(media_id == null) throw new ArgumentNullException("media_id");
            parameters.Add("media_id", media_id);
            if(alt_text == null) throw new ArgumentNullException("alt_text");
            parameters.Add("alt_text", alt_text);
            return this.CreateAsyncImpl(parameters, jm, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST mutes/users.
    /// </summary>
    public partial class MutesUsers : ApiProviderBase
    {
        internal MutesUsers(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns an array of numeric user ids the authenticating user has muted.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<long>> IdsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "mutes/users/ids", parameters);
        }

        /// <summary>
        /// <para>Returns an array of numeric user ids the authenticating user has muted.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<long>> IdsAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "mutes/users/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns an array of numeric user ids the authenticating user has muted.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<long>> IdsAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "mutes/users/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns an array of numeric user ids the authenticating user has muted.</para>
        /// </summary>
        /// <param name="cursor">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<long>> IdsAsync(long? cursor = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(cursor != null) parameters.Add("cursor", cursor);
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "mutes/users/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns an array of user objects the authenticating user has muted.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "mutes/users/list", parameters);
        }

        /// <summary>
        /// <para>Returns an array of user objects the authenticating user has muted.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "mutes/users/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns an array of user objects the authenticating user has muted.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> cursor (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "mutes/users/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns an array of user objects the authenticating user has muted.</para>
        /// </summary>
        /// <param name="cursor">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<Cursored<User>> ListAsync(long? cursor = null, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(cursor != null) parameters.Add("cursor", cursor);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<Cursored<User>>(MethodType.Get, "mutes/users/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The muted user.</returns>
        public Task<UserResponse> CreateAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "mutes/users/create", parameters);
        }

        /// <summary>
        /// <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The muted user.</returns>
        public Task<UserResponse> CreateAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "mutes/users/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The muted user.</returns>
        public Task<UserResponse> CreateAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "mutes/users/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The muted user.</returns>
        public Task<UserResponse> CreateAsync(string screen_name, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "mutes/users/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The muted user.</returns>
        public Task<UserResponse> CreateAsync(long user_id, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "mutes/users/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The unmuted user.</returns>
        public Task<UserResponse> DestroyAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "mutes/users/destroy", parameters);
        }

        /// <summary>
        /// <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The unmuted user.</returns>
        public Task<UserResponse> DestroyAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "mutes/users/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The unmuted user.</returns>
        public Task<UserResponse> DestroyAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "mutes/users/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The unmuted user.</returns>
        public Task<UserResponse> DestroyAsync(string screen_name, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "mutes/users/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The unmuted user.</returns>
        public Task<UserResponse> DestroyAsync(long user_id, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "mutes/users/destroy", parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST saved_searches.
    /// </summary>
    public partial class SavedSearches : ApiProviderBase
    {
        internal SavedSearches(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns the authenticated user’s saved search queries.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The saved searches.</returns>
        public Task<ListedResponse<SearchQuery>> ListAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<SearchQuery>(MethodType.Get, "saved_searches/list", parameters);
        }

        /// <summary>
        /// <para>Returns the authenticated user’s saved search queries.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The saved searches.</returns>
        public Task<ListedResponse<SearchQuery>> ListAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<SearchQuery>(MethodType.Get, "saved_searches/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the authenticated user’s saved search queries.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The saved searches.</returns>
        public Task<ListedResponse<SearchQuery>> ListAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<SearchQuery>(MethodType.Get, "saved_searches/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the authenticated user’s saved search queries.</para>
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The saved searches.</returns>
        public Task<ListedResponse<SearchQuery>> ListAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            return this.Tokens.AccessApiArrayAsync<SearchQuery>(MethodType.Get, "saved_searches/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Retrieve the information for the saved search represented by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The saved search.</returns>
        public Task<SearchQueryResponse> ShowAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessParameterReservedApiAsync<SearchQueryResponse>(MethodType.Get, "saved_searches/show/{id}", new [] { "id" }, InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Retrieve the information for the saved search represented by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The saved search.</returns>
        public Task<SearchQueryResponse> ShowAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<SearchQueryResponse>(MethodType.Get, "saved_searches/show/{id}", new [] { "id" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Retrieve the information for the saved search represented by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The saved search.</returns>
        public Task<SearchQueryResponse> ShowAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<SearchQueryResponse>(MethodType.Get, "saved_searches/show/{id}", new [] { "id" }, InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Retrieve the information for the saved search represented by the given id.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The saved search.</returns>
        public Task<SearchQueryResponse> ShowAsync(long id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            return this.Tokens.AccessParameterReservedApiAsync<SearchQueryResponse>(MethodType.Get, "saved_searches/show/{id}", new [] { "id" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Create a new saved search for the authenticated user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> query (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The saved search.</returns>
        public Task<SearchQueryResponse> CreateAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<SearchQueryResponse>(MethodType.Post, "saved_searches/create", parameters);
        }

        /// <summary>
        /// <para>Create a new saved search for the authenticated user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> query (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The saved search.</returns>
        public Task<SearchQueryResponse> CreateAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<SearchQueryResponse>(MethodType.Post, "saved_searches/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Create a new saved search for the authenticated user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> query (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The saved search.</returns>
        public Task<SearchQueryResponse> CreateAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<SearchQueryResponse>(MethodType.Post, "saved_searches/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Create a new saved search for the authenticated user.</para>
        /// </summary>
        /// <param name="query">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The saved search.</returns>
        public Task<SearchQueryResponse> CreateAsync(string query, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(query == null) throw new ArgumentNullException("query");
            parameters.Add("query", query);
            return this.Tokens.AccessApiAsync<SearchQueryResponse>(MethodType.Post, "saved_searches/create", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Destroys a saved search for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The saved search.</returns>
        public Task<SearchQueryResponse> DestroyAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessParameterReservedApiAsync<SearchQueryResponse>(MethodType.Post, "saved_searches/destroy/{id}", new [] { "id" }, InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Destroys a saved search for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The saved search.</returns>
        public Task<SearchQueryResponse> DestroyAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<SearchQueryResponse>(MethodType.Post, "saved_searches/destroy/{id}", new [] { "id" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Destroys a saved search for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The saved search.</returns>
        public Task<SearchQueryResponse> DestroyAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<SearchQueryResponse>(MethodType.Post, "saved_searches/destroy/{id}", new [] { "id" }, InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Destroys a saved search for the authenticating user.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The saved search.</returns>
        public Task<SearchQueryResponse> DestroyAsync(long id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            return this.Tokens.AccessParameterReservedApiAsync<SearchQueryResponse>(MethodType.Post, "saved_searches/destroy/{id}", new [] { "id" }, parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET search.
    /// </summary>
    public partial class Search : ApiProviderBase
    {
        internal Search(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns a collection of relevant Tweets matching a specified query.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> q (required)</para>
        /// <para>- <c>string</c> geocode (optional)</para>
        /// <para>- <c>string</c> lang (optional)</para>
        /// <para>- <c>string</c> locale (optional)</para>
        /// <para>- <c>string</c> result_type (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>string</c> until (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The statuses.</returns>
        public Task<SearchResult> TweetsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<SearchResult>(MethodType.Get, "search/tweets", parameters);
        }

        /// <summary>
        /// <para>Returns a collection of relevant Tweets matching a specified query.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> q (required)</para>
        /// <para>- <c>string</c> geocode (optional)</para>
        /// <para>- <c>string</c> lang (optional)</para>
        /// <para>- <c>string</c> locale (optional)</para>
        /// <para>- <c>string</c> result_type (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>string</c> until (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<SearchResult> TweetsAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<SearchResult>(MethodType.Get, "search/tweets", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of relevant Tweets matching a specified query.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> q (required)</para>
        /// <para>- <c>string</c> geocode (optional)</para>
        /// <para>- <c>string</c> lang (optional)</para>
        /// <para>- <c>string</c> locale (optional)</para>
        /// <para>- <c>string</c> result_type (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>string</c> until (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<SearchResult> TweetsAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<SearchResult>(MethodType.Get, "search/tweets", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of relevant Tweets matching a specified query.</para>
        /// </summary>
        /// <param name="q">required.</param>
        /// <param name="geocode">optional.</param>
        /// <param name="lang">optional.</param>
        /// <param name="locale">optional.</param>
        /// <param name="result_type">optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="until">optional.</param>
        /// <param name="since_id">optional.</param>
        /// <param name="max_id">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<SearchResult> TweetsAsync(string q, string geocode = null, string lang = null, string locale = null, string result_type = null, int? count = null, string until = null, long? since_id = null, long? max_id = null, bool? include_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(q == null) throw new ArgumentNullException("q");
            parameters.Add("q", q);
            if(geocode != null) parameters.Add("geocode", geocode);
            if(lang != null) parameters.Add("lang", lang);
            if(locale != null) parameters.Add("locale", locale);
            if(result_type != null) parameters.Add("result_type", result_type);
            if(count != null) parameters.Add("count", count);
            if(until != null) parameters.Add("until", until);
            if(since_id != null) parameters.Add("since_id", since_id);
            if(max_id != null) parameters.Add("max_id", max_id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<SearchResult>(MethodType.Get, "search/tweets", parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST statuses.
    /// </summary>
    public partial class Statuses : ApiProviderBase
    {
        internal Statuses(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns the most recent mentions (tweets containing a users's &#64;screen_name) for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> contributor_details (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> MentionsTimelineAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/mentions_timeline", parameters);
        }

        /// <summary>
        /// <para>Returns the most recent mentions (tweets containing a users's &#64;screen_name) for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> contributor_details (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> MentionsTimelineAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/mentions_timeline", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the most recent mentions (tweets containing a users's &#64;screen_name) for the authenticating user.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> contributor_details (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> MentionsTimelineAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/mentions_timeline", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the most recent mentions (tweets containing a users's &#64;screen_name) for the authenticating user.</para>
        /// </summary>
        /// <param name="count">optional.</param>
        /// <param name="since_id">optional.</param>
        /// <param name="max_id">optional.</param>
        /// <param name="trim_user">optional.</param>
        /// <param name="contributor_details">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> MentionsTimelineAsync(int? count = null, long? since_id = null, long? max_id = null, bool? trim_user = null, bool? contributor_details = null, bool? include_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(count != null) parameters.Add("count", count);
            if(since_id != null) parameters.Add("since_id", since_id);
            if(max_id != null) parameters.Add("max_id", max_id);
            if(trim_user != null) parameters.Add("trim_user", trim_user);
            if(contributor_details != null) parameters.Add("contributor_details", contributor_details);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/mentions_timeline", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> exclude_replies (optional)</para>
        /// <para>- <c>bool</c> contributor_details (optional)</para>
        /// <para>- <c>bool</c> include_rts (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> UserTimelineAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/user_timeline", parameters);
        }

        /// <summary>
        /// <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> exclude_replies (optional)</para>
        /// <para>- <c>bool</c> contributor_details (optional)</para>
        /// <para>- <c>bool</c> include_rts (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> UserTimelineAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/user_timeline", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> exclude_replies (optional)</para>
        /// <para>- <c>bool</c> contributor_details (optional)</para>
        /// <para>- <c>bool</c> include_rts (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> UserTimelineAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/user_timeline", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
        /// </summary>
        /// <param name="count">optional.</param>
        /// <param name="since_id">optional.</param>
        /// <param name="max_id">optional.</param>
        /// <param name="trim_user">optional.</param>
        /// <param name="exclude_replies">optional.</param>
        /// <param name="contributor_details">optional.</param>
        /// <param name="include_rts">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> UserTimelineAsync(int? count = null, long? since_id = null, long? max_id = null, bool? trim_user = null, bool? exclude_replies = null, bool? contributor_details = null, bool? include_rts = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(count != null) parameters.Add("count", count);
            if(since_id != null) parameters.Add("since_id", since_id);
            if(max_id != null) parameters.Add("max_id", max_id);
            if(trim_user != null) parameters.Add("trim_user", trim_user);
            if(exclude_replies != null) parameters.Add("exclude_replies", exclude_replies);
            if(contributor_details != null) parameters.Add("contributor_details", contributor_details);
            if(include_rts != null) parameters.Add("include_rts", include_rts);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/user_timeline", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="count">optional.</param>
        /// <param name="since_id">optional.</param>
        /// <param name="max_id">optional.</param>
        /// <param name="trim_user">optional.</param>
        /// <param name="exclude_replies">optional.</param>
        /// <param name="contributor_details">optional.</param>
        /// <param name="include_rts">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> UserTimelineAsync(long user_id, int? count = null, long? since_id = null, long? max_id = null, bool? trim_user = null, bool? exclude_replies = null, bool? contributor_details = null, bool? include_rts = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(count != null) parameters.Add("count", count);
            if(since_id != null) parameters.Add("since_id", since_id);
            if(max_id != null) parameters.Add("max_id", max_id);
            if(trim_user != null) parameters.Add("trim_user", trim_user);
            if(exclude_replies != null) parameters.Add("exclude_replies", exclude_replies);
            if(contributor_details != null) parameters.Add("contributor_details", contributor_details);
            if(include_rts != null) parameters.Add("include_rts", include_rts);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/user_timeline", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="count">optional.</param>
        /// <param name="since_id">optional.</param>
        /// <param name="max_id">optional.</param>
        /// <param name="trim_user">optional.</param>
        /// <param name="exclude_replies">optional.</param>
        /// <param name="contributor_details">optional.</param>
        /// <param name="include_rts">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> UserTimelineAsync(string screen_name, int? count = null, long? since_id = null, long? max_id = null, bool? trim_user = null, bool? exclude_replies = null, bool? contributor_details = null, bool? include_rts = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(count != null) parameters.Add("count", count);
            if(since_id != null) parameters.Add("since_id", since_id);
            if(max_id != null) parameters.Add("max_id", max_id);
            if(trim_user != null) parameters.Add("trim_user", trim_user);
            if(exclude_replies != null) parameters.Add("exclude_replies", exclude_replies);
            if(contributor_details != null) parameters.Add("contributor_details", contributor_details);
            if(include_rts != null) parameters.Add("include_rts", include_rts);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/user_timeline", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> exclude_replies (optional)</para>
        /// <para>- <c>bool</c> contributor_details (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> HomeTimelineAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/home_timeline", parameters);
        }

        /// <summary>
        /// <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> exclude_replies (optional)</para>
        /// <para>- <c>bool</c> contributor_details (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> HomeTimelineAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/home_timeline", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> exclude_replies (optional)</para>
        /// <para>- <c>bool</c> contributor_details (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> HomeTimelineAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/home_timeline", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow.</para>
        /// </summary>
        /// <param name="count">optional.</param>
        /// <param name="since_id">optional.</param>
        /// <param name="max_id">optional.</param>
        /// <param name="trim_user">optional.</param>
        /// <param name="exclude_replies">optional.</param>
        /// <param name="contributor_details">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> HomeTimelineAsync(int? count = null, long? since_id = null, long? max_id = null, bool? trim_user = null, bool? exclude_replies = null, bool? contributor_details = null, bool? include_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(count != null) parameters.Add("count", count);
            if(since_id != null) parameters.Add("since_id", since_id);
            if(max_id != null) parameters.Add("max_id", max_id);
            if(trim_user != null) parameters.Add("trim_user", trim_user);
            if(exclude_replies != null) parameters.Add("exclude_replies", exclude_replies);
            if(contributor_details != null) parameters.Add("contributor_details", contributor_details);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/home_timeline", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_user_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> RetweetsOfMeAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/retweets_of_me", parameters);
        }

        /// <summary>
        /// <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_user_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> RetweetsOfMeAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/retweets_of_me", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_user_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> RetweetsOfMeAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/retweets_of_me", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others.</para>
        /// </summary>
        /// <param name="count">optional.</param>
        /// <param name="since_id">optional.</param>
        /// <param name="max_id">optional.</param>
        /// <param name="trim_user">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_user_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> RetweetsOfMeAsync(int? count = null, long? since_id = null, long? max_id = null, bool? trim_user = null, bool? include_entities = null, bool? include_user_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(count != null) parameters.Add("count", count);
            if(since_id != null) parameters.Add("since_id", since_id);
            if(max_id != null) parameters.Add("max_id", max_id);
            if(trim_user != null) parameters.Add("trim_user", trim_user);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_user_entities != null) parameters.Add("include_user_entities", include_user_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/retweets_of_me", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (any one is required)</para>
        /// <para>- <c>string</c> url (any one is required)</para>
        /// <para>- <c>int</c> maxwidth (optional)</para>
        /// <para>- <c>bool</c> hide_media (optional)</para>
        /// <para>- <c>bool</c> hide_thread (optional)</para>
        /// <para>- <c>bool</c> omit_script (optional)</para>
        /// <para>- <c>string</c> align (optional)</para>
        /// <para>- <c>string</c> related (optional)</para>
        /// <para>- <c>string</c> lang (optional)</para>
        /// <para>- <c>string</c> widget_type (optional)</para>
        /// <para>- <c>bool</c> hide_tweet (optional)</para>
        /// <para>- <c>string</c> theme (optional)</para>
        /// <para>- <c>string</c> link_color (optional)</para>
        /// <para>- <c>bool</c> dnt (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The HTML code and more.</returns>
        public Task<Embed> OembedAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Embed>(MethodType.Get, "statuses/oembed", parameters);
        }

        /// <summary>
        /// <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (any one is required)</para>
        /// <para>- <c>string</c> url (any one is required)</para>
        /// <para>- <c>int</c> maxwidth (optional)</para>
        /// <para>- <c>bool</c> hide_media (optional)</para>
        /// <para>- <c>bool</c> hide_thread (optional)</para>
        /// <para>- <c>bool</c> omit_script (optional)</para>
        /// <para>- <c>string</c> align (optional)</para>
        /// <para>- <c>string</c> related (optional)</para>
        /// <para>- <c>string</c> lang (optional)</para>
        /// <para>- <c>string</c> widget_type (optional)</para>
        /// <para>- <c>bool</c> hide_tweet (optional)</para>
        /// <para>- <c>string</c> theme (optional)</para>
        /// <para>- <c>string</c> link_color (optional)</para>
        /// <para>- <c>bool</c> dnt (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The HTML code and more.</returns>
        public Task<Embed> OembedAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Embed>(MethodType.Get, "statuses/oembed", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (any one is required)</para>
        /// <para>- <c>string</c> url (any one is required)</para>
        /// <para>- <c>int</c> maxwidth (optional)</para>
        /// <para>- <c>bool</c> hide_media (optional)</para>
        /// <para>- <c>bool</c> hide_thread (optional)</para>
        /// <para>- <c>bool</c> omit_script (optional)</para>
        /// <para>- <c>string</c> align (optional)</para>
        /// <para>- <c>string</c> related (optional)</para>
        /// <para>- <c>string</c> lang (optional)</para>
        /// <para>- <c>string</c> widget_type (optional)</para>
        /// <para>- <c>bool</c> hide_tweet (optional)</para>
        /// <para>- <c>string</c> theme (optional)</para>
        /// <para>- <c>string</c> link_color (optional)</para>
        /// <para>- <c>bool</c> dnt (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The HTML code and more.</returns>
        public Task<Embed> OembedAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Embed>(MethodType.Get, "statuses/oembed", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
        /// </summary>
        /// <param name="id">any one is required.</param>
        /// <param name="maxwidth">optional.</param>
        /// <param name="hide_media">optional.</param>
        /// <param name="hide_thread">optional.</param>
        /// <param name="omit_script">optional.</param>
        /// <param name="align">optional.</param>
        /// <param name="related">optional.</param>
        /// <param name="lang">optional.</param>
        /// <param name="widget_type">optional.</param>
        /// <param name="hide_tweet">optional.</param>
        /// <param name="theme">optional.</param>
        /// <param name="link_color">optional.</param>
        /// <param name="dnt">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The HTML code and more.</returns>
        public Task<Embed> OembedAsync(long id, int? maxwidth = null, bool? hide_media = null, bool? hide_thread = null, bool? omit_script = null, string align = null, string related = null, string lang = null, string widget_type = null, bool? hide_tweet = null, string theme = null, string link_color = null, bool? dnt = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            if(maxwidth != null) parameters.Add("maxwidth", maxwidth);
            if(hide_media != null) parameters.Add("hide_media", hide_media);
            if(hide_thread != null) parameters.Add("hide_thread", hide_thread);
            if(omit_script != null) parameters.Add("omit_script", omit_script);
            if(align != null) parameters.Add("align", align);
            if(related != null) parameters.Add("related", related);
            if(lang != null) parameters.Add("lang", lang);
            if(widget_type != null) parameters.Add("widget_type", widget_type);
            if(hide_tweet != null) parameters.Add("hide_tweet", hide_tweet);
            if(theme != null) parameters.Add("theme", theme);
            if(link_color != null) parameters.Add("link_color", link_color);
            if(dnt != null) parameters.Add("dnt", dnt);
            return this.Tokens.AccessApiAsync<Embed>(MethodType.Get, "statuses/oembed", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
        /// </summary>
        /// <param name="url">any one is required.</param>
        /// <param name="maxwidth">optional.</param>
        /// <param name="hide_media">optional.</param>
        /// <param name="hide_thread">optional.</param>
        /// <param name="omit_script">optional.</param>
        /// <param name="align">optional.</param>
        /// <param name="related">optional.</param>
        /// <param name="lang">optional.</param>
        /// <param name="widget_type">optional.</param>
        /// <param name="hide_tweet">optional.</param>
        /// <param name="theme">optional.</param>
        /// <param name="link_color">optional.</param>
        /// <param name="dnt">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The HTML code and more.</returns>
        public Task<Embed> OembedAsync(string url, int? maxwidth = null, bool? hide_media = null, bool? hide_thread = null, bool? omit_script = null, string align = null, string related = null, string lang = null, string widget_type = null, bool? hide_tweet = null, string theme = null, string link_color = null, bool? dnt = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(url == null) throw new ArgumentNullException("url");
            parameters.Add("url", url);
            if(maxwidth != null) parameters.Add("maxwidth", maxwidth);
            if(hide_media != null) parameters.Add("hide_media", hide_media);
            if(hide_thread != null) parameters.Add("hide_thread", hide_thread);
            if(omit_script != null) parameters.Add("omit_script", omit_script);
            if(align != null) parameters.Add("align", align);
            if(related != null) parameters.Add("related", related);
            if(lang != null) parameters.Add("lang", lang);
            if(widget_type != null) parameters.Add("widget_type", widget_type);
            if(hide_tweet != null) parameters.Add("hide_tweet", hide_tweet);
            if(theme != null) parameters.Add("theme", theme);
            if(link_color != null) parameters.Add("link_color", link_color);
            if(dnt != null) parameters.Add("dnt", dnt);
            return this.Tokens.AccessApiAsync<Embed>(MethodType.Get, "statuses/oembed", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a single Tweet, specified by the id parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_my_retweet (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The status.</returns>
        public Task<StatusResponse> ShowAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessParameterReservedApiAsync<StatusResponse>(MethodType.Get, "statuses/show/{id}", new [] { "id" }, InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Returns a single Tweet, specified by the id parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_my_retweet (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The status.</returns>
        public Task<StatusResponse> ShowAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<StatusResponse>(MethodType.Get, "statuses/show/{id}", new [] { "id" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a single Tweet, specified by the id parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_my_retweet (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The status.</returns>
        public Task<StatusResponse> ShowAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<StatusResponse>(MethodType.Get, "statuses/show/{id}", new [] { "id" }, InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Returns a single Tweet, specified by the id parameter.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="trim_user">optional.</param>
        /// <param name="include_my_retweet">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The status.</returns>
        public Task<StatusResponse> ShowAsync(long id, bool? trim_user = null, bool? include_my_retweet = null, bool? include_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            if(trim_user != null) parameters.Add("trim_user", trim_user);
            if(include_my_retweet != null) parameters.Add("include_my_retweet", include_my_retweet);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessParameterReservedApiAsync<StatusResponse>(MethodType.Get, "statuses/show/{id}", new [] { "id" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns up to 100 of the first retweets of a given tweet.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> RetweetsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessParameterReservedApiArrayAsync<Status>(MethodType.Get, "statuses/retweets/{id}", new [] { "id" }, InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Returns up to 100 of the first retweets of a given tweet.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> RetweetsAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiArrayAsync<Status>(MethodType.Get, "statuses/retweets/{id}", new [] { "id" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns up to 100 of the first retweets of a given tweet.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> RetweetsAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiArrayAsync<Status>(MethodType.Get, "statuses/retweets/{id}", new [] { "id" }, InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Returns up to 100 of the first retweets of a given tweet.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="count">optional.</param>
        /// <param name="trim_user">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> RetweetsAsync(long id, int? count = null, bool? trim_user = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            if(count != null) parameters.Add("count", count);
            if(trim_user != null) parameters.Add("trim_user", trim_user);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessParameterReservedApiArrayAsync<Status>(MethodType.Get, "statuses/retweets/{id}", new [] { "id" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> LookupAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/lookup", parameters);
        }

        /// <summary>
        /// <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> LookupAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/lookup", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> LookupAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/lookup", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="trim_user">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<ListedResponse<Status>> LookupAsync(IEnumerable<long> id, bool? trim_user = null, bool? include_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(id == null) throw new ArgumentNullException("id");
            parameters.Add("id", id);
            if(trim_user != null) parameters.Add("trim_user", trim_user);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<Status>(MethodType.Get, "statuses/lookup", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The statuses.</returns>
        public Task<DictionaryResponse<string, Status>> LookupMapAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.LookupMapAsyncImpl(InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<DictionaryResponse<string, Status>> LookupMapAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.LookupMapAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<DictionaryResponse<string, Status>> LookupMapAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.LookupMapAsyncImpl(InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="trim_user">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<DictionaryResponse<string, Status>> LookupMapAsync(IEnumerable<long> id, bool? trim_user = null, bool? include_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(id == null) throw new ArgumentNullException("id");
            parameters.Add("id", id);
            if(trim_user != null) parameters.Add("trim_user", trim_user);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.LookupMapAsyncImpl(parameters, cancellationToken);
        }

        private Task<DictionaryResponse<string, Status>> LookupMapAsyncImpl(IEnumerable<KeyValuePair<string, object>> parameters, CancellationToken cancellationToken)
        {
            if(parameters == null) throw new ArgumentNullException("parameters");
            return this.Tokens.AccessApiDictionaryAsyncImpl<string, Status>(MethodType.Post, "statuses/lookup",
                parameters.Concat(new[] { new KeyValuePair<string, object>("map", "true") }), cancellationToken, "id");
        }

        /// <summary>
        /// <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> RetweetersIdsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "statuses/retweeters/ids", parameters);
        }

        /// <summary>
        /// <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> RetweetersIdsAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "statuses/retweeters/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>long</c> cursor (semi-optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> RetweetersIdsAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "statuses/retweeters/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="cursor">semi-optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The IDs.</returns>
        public Task<Cursored<long>> RetweetersIdsAsync(long id, long? cursor = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            if(cursor != null) parameters.Add("cursor", cursor);
            return this.Tokens.AccessApiAsync<Cursored<long>>(MethodType.Get, "statuses/retweeters/ids", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s current status, also known as Tweeting.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> status (required)</para>
        /// <para>- <c>long</c> in_reply_to_status_id (optional)</para>
        /// <para>- <c>bool</c> possibly_sensitive (optional)</para>
        /// <para>- <c>double</c> lat (optional)</para>
        /// <para>- <c>double</c> long (optional)</para>
        /// <para>- <c>string</c> place_id (optional)</para>
        /// <para>- <c>bool</c> display_coordinates (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> media_ids (optional)</para>
        /// <para>- <c>string</c> attachment_url (optional)</para>
        /// <para>- <c>bool</c> auto_populate_reply_metadata (optional)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> exclude_reply_user_ids (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// <para>- <c>bool</c> enable_dm_commands (optional)</para>
        /// <para>- <c>bool</c> fail_dm_commands (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The updated status.</returns>
        public Task<StatusResponse> UpdateAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<StatusResponse>(MethodType.Post, "statuses/update", parameters);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s current status, also known as Tweeting.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> status (required)</para>
        /// <para>- <c>long</c> in_reply_to_status_id (optional)</para>
        /// <para>- <c>bool</c> possibly_sensitive (optional)</para>
        /// <para>- <c>double</c> lat (optional)</para>
        /// <para>- <c>double</c> long (optional)</para>
        /// <para>- <c>string</c> place_id (optional)</para>
        /// <para>- <c>bool</c> display_coordinates (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> media_ids (optional)</para>
        /// <para>- <c>string</c> attachment_url (optional)</para>
        /// <para>- <c>bool</c> auto_populate_reply_metadata (optional)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> exclude_reply_user_ids (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// <para>- <c>bool</c> enable_dm_commands (optional)</para>
        /// <para>- <c>bool</c> fail_dm_commands (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The updated status.</returns>
        public Task<StatusResponse> UpdateAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<StatusResponse>(MethodType.Post, "statuses/update", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s current status, also known as Tweeting.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> status (required)</para>
        /// <para>- <c>long</c> in_reply_to_status_id (optional)</para>
        /// <para>- <c>bool</c> possibly_sensitive (optional)</para>
        /// <para>- <c>double</c> lat (optional)</para>
        /// <para>- <c>double</c> long (optional)</para>
        /// <para>- <c>string</c> place_id (optional)</para>
        /// <para>- <c>bool</c> display_coordinates (optional)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> media_ids (optional)</para>
        /// <para>- <c>string</c> attachment_url (optional)</para>
        /// <para>- <c>bool</c> auto_populate_reply_metadata (optional)</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> exclude_reply_user_ids (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// <para>- <c>bool</c> enable_dm_commands (optional)</para>
        /// <para>- <c>bool</c> fail_dm_commands (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The updated status.</returns>
        public Task<StatusResponse> UpdateAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<StatusResponse>(MethodType.Post, "statuses/update", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s current status, also known as Tweeting.</para>
        /// </summary>
        /// <param name="status">required.</param>
        /// <param name="in_reply_to_status_id">optional.</param>
        /// <param name="possibly_sensitive">optional.</param>
        /// <param name="lat">optional.</param>
        /// <param name="long">optional.</param>
        /// <param name="place_id">optional.</param>
        /// <param name="display_coordinates">optional.</param>
        /// <param name="trim_user">optional.</param>
        /// <param name="media_ids">optional.</param>
        /// <param name="attachment_url">optional.</param>
        /// <param name="auto_populate_reply_metadata">optional.</param>
        /// <param name="exclude_reply_user_ids">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="enable_dm_commands">optional.</param>
        /// <param name="fail_dm_commands">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The updated status.</returns>
        public Task<StatusResponse> UpdateAsync(string status, long? in_reply_to_status_id = null, bool? possibly_sensitive = null, double? lat = null, double? @long = null, string place_id = null, bool? display_coordinates = null, bool? trim_user = null, IEnumerable<long> media_ids = null, string attachment_url = null, bool? auto_populate_reply_metadata = null, IEnumerable<long> exclude_reply_user_ids = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, bool? enable_dm_commands = null, bool? fail_dm_commands = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(status == null) throw new ArgumentNullException("status");
            parameters.Add("status", status);
            if(in_reply_to_status_id != null) parameters.Add("in_reply_to_status_id", in_reply_to_status_id);
            if(possibly_sensitive != null) parameters.Add("possibly_sensitive", possibly_sensitive);
            if(lat != null) parameters.Add("lat", lat);
            if(@long != null) parameters.Add("long", @long);
            if(place_id != null) parameters.Add("place_id", place_id);
            if(display_coordinates != null) parameters.Add("display_coordinates", display_coordinates);
            if(trim_user != null) parameters.Add("trim_user", trim_user);
            if(media_ids != null) parameters.Add("media_ids", media_ids);
            if(attachment_url != null) parameters.Add("attachment_url", attachment_url);
            if(auto_populate_reply_metadata != null) parameters.Add("auto_populate_reply_metadata", auto_populate_reply_metadata);
            if(exclude_reply_user_ids != null) parameters.Add("exclude_reply_user_ids", exclude_reply_user_ids);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            if(enable_dm_commands != null) parameters.Add("enable_dm_commands", enable_dm_commands);
            if(fail_dm_commands != null) parameters.Add("fail_dm_commands", fail_dm_commands);
            return this.Tokens.AccessApiAsync<StatusResponse>(MethodType.Post, "statuses/update", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s current status and attaches media for upload.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> status (required)</para>
        /// <para>- <c>Stream</c> media (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
        /// <para>- <c>FileInfo</c> media (any one is required)</para>
        /// <para>- <c>bool</c> possibly_sensitive (optional)</para>
        /// <para>- <c>long</c> in_reply_to_status_id (optional)</para>
        /// <para>- <c>double</c> lat (optional)</para>
        /// <para>- <c>double</c> long (optional)</para>
        /// <para>- <c>string</c> place_id (optional)</para>
        /// <para>- <c>bool</c> display_coordinates (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The updated status.</returns>
        public Task<StatusResponse> UpdateWithMediaAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.UpdateWithMediaAsyncImpl(InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s current status and attaches media for upload.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> status (required)</para>
        /// <para>- <c>Stream</c> media (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
        /// <para>- <c>FileInfo</c> media (any one is required)</para>
        /// <para>- <c>bool</c> possibly_sensitive (optional)</para>
        /// <para>- <c>long</c> in_reply_to_status_id (optional)</para>
        /// <para>- <c>double</c> lat (optional)</para>
        /// <para>- <c>double</c> long (optional)</para>
        /// <para>- <c>string</c> place_id (optional)</para>
        /// <para>- <c>bool</c> display_coordinates (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The updated status.</returns>
        public Task<StatusResponse> UpdateWithMediaAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.UpdateWithMediaAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s current status and attaches media for upload.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> status (required)</para>
        /// <para>- <c>Stream</c> media (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
        /// <para>- <c>FileInfo</c> media (any one is required)</para>
        /// <para>- <c>bool</c> possibly_sensitive (optional)</para>
        /// <para>- <c>long</c> in_reply_to_status_id (optional)</para>
        /// <para>- <c>double</c> lat (optional)</para>
        /// <para>- <c>double</c> long (optional)</para>
        /// <para>- <c>string</c> place_id (optional)</para>
        /// <para>- <c>bool</c> display_coordinates (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The updated status.</returns>
        public Task<StatusResponse> UpdateWithMediaAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.UpdateWithMediaAsyncImpl(InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s current status and attaches media for upload.</para>
        /// </summary>
        /// <param name="status">required.</param>
        /// <param name="media">any one is required.</param>
        /// <param name="possibly_sensitive">optional.</param>
        /// <param name="in_reply_to_status_id">optional.</param>
        /// <param name="lat">optional.</param>
        /// <param name="long">optional.</param>
        /// <param name="place_id">optional.</param>
        /// <param name="display_coordinates">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The updated status.</returns>
        public Task<StatusResponse> UpdateWithMediaAsync(string status, Stream media, bool? possibly_sensitive = null, long? in_reply_to_status_id = null, double? lat = null, double? @long = null, string place_id = null, bool? display_coordinates = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(status == null) throw new ArgumentNullException("status");
            parameters.Add("status", status);
            if(media == null) throw new ArgumentNullException("media");
            parameters.Add("media", media);
            if(possibly_sensitive != null) parameters.Add("possibly_sensitive", possibly_sensitive);
            if(in_reply_to_status_id != null) parameters.Add("in_reply_to_status_id", in_reply_to_status_id);
            if(lat != null) parameters.Add("lat", lat);
            if(@long != null) parameters.Add("long", @long);
            if(place_id != null) parameters.Add("place_id", place_id);
            if(display_coordinates != null) parameters.Add("display_coordinates", display_coordinates);
            return this.UpdateWithMediaAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s current status and attaches media for upload.</para>
        /// </summary>
        /// <param name="status">required.</param>
        /// <param name="media">any one is required.</param>
        /// <param name="possibly_sensitive">optional.</param>
        /// <param name="in_reply_to_status_id">optional.</param>
        /// <param name="lat">optional.</param>
        /// <param name="long">optional.</param>
        /// <param name="place_id">optional.</param>
        /// <param name="display_coordinates">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The updated status.</returns>
        public Task<StatusResponse> UpdateWithMediaAsync(string status, IEnumerable<byte> media, bool? possibly_sensitive = null, long? in_reply_to_status_id = null, double? lat = null, double? @long = null, string place_id = null, bool? display_coordinates = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(status == null) throw new ArgumentNullException("status");
            parameters.Add("status", status);
            if(media == null) throw new ArgumentNullException("media");
            parameters.Add("media", media);
            if(possibly_sensitive != null) parameters.Add("possibly_sensitive", possibly_sensitive);
            if(in_reply_to_status_id != null) parameters.Add("in_reply_to_status_id", in_reply_to_status_id);
            if(lat != null) parameters.Add("lat", lat);
            if(@long != null) parameters.Add("long", @long);
            if(place_id != null) parameters.Add("place_id", place_id);
            if(display_coordinates != null) parameters.Add("display_coordinates", display_coordinates);
            return this.UpdateWithMediaAsyncImpl(parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Updates the authenticating user’s current status and attaches media for upload.</para>
        /// </summary>
        /// <param name="status">required.</param>
        /// <param name="media">any one is required.</param>
        /// <param name="possibly_sensitive">optional.</param>
        /// <param name="in_reply_to_status_id">optional.</param>
        /// <param name="lat">optional.</param>
        /// <param name="long">optional.</param>
        /// <param name="place_id">optional.</param>
        /// <param name="display_coordinates">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The updated status.</returns>
        public Task<StatusResponse> UpdateWithMediaAsync(string status, FileInfo media, bool? possibly_sensitive = null, long? in_reply_to_status_id = null, double? lat = null, double? @long = null, string place_id = null, bool? display_coordinates = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(status == null) throw new ArgumentNullException("status");
            parameters.Add("status", status);
            if(media == null) throw new ArgumentNullException("media");
            parameters.Add("media", media);
            if(possibly_sensitive != null) parameters.Add("possibly_sensitive", possibly_sensitive);
            if(in_reply_to_status_id != null) parameters.Add("in_reply_to_status_id", in_reply_to_status_id);
            if(lat != null) parameters.Add("lat", lat);
            if(@long != null) parameters.Add("long", @long);
            if(place_id != null) parameters.Add("place_id", place_id);
            if(display_coordinates != null) parameters.Add("display_coordinates", display_coordinates);
            return this.UpdateWithMediaAsyncImpl(parameters, cancellationToken);
        }

        private Task<StatusResponse> UpdateWithMediaAsyncImpl(IEnumerable<KeyValuePair<string, object>> parameters, CancellationToken cancellationToken)
        {
            if(parameters == null) throw new ArgumentNullException("parameters");
            var list = parameters.ToList();
            list.Where(kvp => kvp.Key == "media").ToArray().ForEach(kvp =>
            {
                list.Remove(kvp);
                list.Add(new KeyValuePair<string, object>("media[]", kvp.Value));
            });
            return this.Tokens.AccessApiAsyncImpl<StatusResponse>(MethodType.Post, "statuses/update_with_media", list, cancellationToken, "");
        }

        /// <summary>
        /// <para>Destroys the status specified by the required ID parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The destroyed status.</returns>
        public Task<StatusResponse> DestroyAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessParameterReservedApiAsync<StatusResponse>(MethodType.Post, "statuses/destroy/{id}", new [] { "id" }, InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Destroys the status specified by the required ID parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The destroyed status.</returns>
        public Task<StatusResponse> DestroyAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<StatusResponse>(MethodType.Post, "statuses/destroy/{id}", new [] { "id" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Destroys the status specified by the required ID parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The destroyed status.</returns>
        public Task<StatusResponse> DestroyAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<StatusResponse>(MethodType.Post, "statuses/destroy/{id}", new [] { "id" }, InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Destroys the status specified by the required ID parameter.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="trim_user">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The destroyed status.</returns>
        public Task<StatusResponse> DestroyAsync(long id, bool? trim_user = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            if(trim_user != null) parameters.Add("trim_user", trim_user);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessParameterReservedApiAsync<StatusResponse>(MethodType.Post, "statuses/destroy/{id}", new [] { "id" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Retweets a tweet.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The retweeted status.</returns>
        public Task<StatusResponse> RetweetAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessParameterReservedApiAsync<StatusResponse>(MethodType.Post, "statuses/retweet/{id}", new [] { "id" }, InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Retweets a tweet.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The retweeted status.</returns>
        public Task<StatusResponse> RetweetAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<StatusResponse>(MethodType.Post, "statuses/retweet/{id}", new [] { "id" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Retweets a tweet.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The retweeted status.</returns>
        public Task<StatusResponse> RetweetAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<StatusResponse>(MethodType.Post, "statuses/retweet/{id}", new [] { "id" }, InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Retweets a tweet.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="trim_user">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The retweeted status.</returns>
        public Task<StatusResponse> RetweetAsync(long id, bool? trim_user = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            if(trim_user != null) parameters.Add("trim_user", trim_user);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessParameterReservedApiAsync<StatusResponse>(MethodType.Post, "statuses/retweet/{id}", new [] { "id" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Untweets a retweeted status.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The original Tweet with retweet details embedded.</returns>
        public Task<StatusResponse> UnretweetAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessParameterReservedApiAsync<StatusResponse>(MethodType.Post, "statuses/unretweet/{id}", new [] { "id" }, InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Untweets a retweeted status.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The original Tweet with retweet details embedded.</returns>
        public Task<StatusResponse> UnretweetAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<StatusResponse>(MethodType.Post, "statuses/unretweet/{id}", new [] { "id" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Untweets a retweeted status.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>bool</c> trim_user (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The original Tweet with retweet details embedded.</returns>
        public Task<StatusResponse> UnretweetAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<StatusResponse>(MethodType.Post, "statuses/unretweet/{id}", new [] { "id" }, InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Untweets a retweeted status.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="trim_user">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The original Tweet with retweet details embedded.</returns>
        public Task<StatusResponse> UnretweetAsync(long id, bool? trim_user = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            if(trim_user != null) parameters.Add("trim_user", trim_user);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessParameterReservedApiAsync<StatusResponse>(MethodType.Post, "statuses/unretweet/{id}", new [] { "id" }, parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET trends.
    /// </summary>
    public partial class Trends : ApiProviderBase
    {
        internal Trends(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns the locations that Twitter has trending topic information for.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The locations.</returns>
        public Task<ListedResponse<TrendLocation>> AvailableAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<TrendLocation>(MethodType.Get, "trends/available", parameters);
        }

        /// <summary>
        /// <para>Returns the locations that Twitter has trending topic information for.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The locations.</returns>
        public Task<ListedResponse<TrendLocation>> AvailableAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<TrendLocation>(MethodType.Get, "trends/available", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the locations that Twitter has trending topic information for.</para>
        /// <para>Available parameters:</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The locations.</returns>
        public Task<ListedResponse<TrendLocation>> AvailableAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<TrendLocation>(MethodType.Get, "trends/available", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the locations that Twitter has trending topic information for.</para>
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The locations.</returns>
        public Task<ListedResponse<TrendLocation>> AvailableAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            return this.Tokens.AccessApiArrayAsync<TrendLocation>(MethodType.Get, "trends/available", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>double</c> lat (required)</para>
        /// <para>- <c>double</c> long (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The locations.</returns>
        public Task<ListedResponse<TrendLocation>> ClosestAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<TrendLocation>(MethodType.Get, "trends/closest", parameters);
        }

        /// <summary>
        /// <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>double</c> lat (required)</para>
        /// <para>- <c>double</c> long (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The locations.</returns>
        public Task<ListedResponse<TrendLocation>> ClosestAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<TrendLocation>(MethodType.Get, "trends/closest", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>double</c> lat (required)</para>
        /// <para>- <c>double</c> long (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The locations.</returns>
        public Task<ListedResponse<TrendLocation>> ClosestAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<TrendLocation>(MethodType.Get, "trends/closest", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
        /// </summary>
        /// <param name="lat">required.</param>
        /// <param name="long">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The locations.</returns>
        public Task<ListedResponse<TrendLocation>> ClosestAsync(double lat, double @long, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("lat", lat);
            parameters.Add("long", @long);
            return this.Tokens.AccessApiArrayAsync<TrendLocation>(MethodType.Get, "trends/closest", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>string</c> exclude (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The queries.</returns>
        public Task<ListedResponse<TrendsResult>> PlaceAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<TrendsResult>(MethodType.Get, "trends/place", parameters);
        }

        /// <summary>
        /// <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>string</c> exclude (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The queries.</returns>
        public Task<ListedResponse<TrendsResult>> PlaceAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<TrendsResult>(MethodType.Get, "trends/place", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>string</c> exclude (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The queries.</returns>
        public Task<ListedResponse<TrendsResult>> PlaceAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<TrendsResult>(MethodType.Get, "trends/place", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="exclude">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The queries.</returns>
        public Task<ListedResponse<TrendsResult>> PlaceAsync(long id, string exclude = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("id", id);
            if(exclude != null) parameters.Add("exclude", exclude);
            return this.Tokens.AccessApiArrayAsync<TrendsResult>(MethodType.Get, "trends/place", parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of Premium search API.
    /// </summary>
    public partial class Tweets : ApiProviderBase
    {
        internal Tweets(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns a collection of relevant Tweets matching a specified query.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> product (required)</para>
        /// <para>- <c>string</c> label (required)</para>
        /// <para>- <c>string</c> query (required)</para>
        /// <para>- <c>string</c> tag (optional)</para>
        /// <para>- <c>DateTimeOffset</c> fromDate (optional)</para>
        /// <para>- <c>DateTimeOffset</c> toDate (optional)</para>
        /// <para>- <c>long</c> maxResults (optional)</para>
        /// <para>- <c>string</c> next (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The statuses.</returns>
        public Task<PremiumSearchResult> SearchAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessParameterReservedApiAsync<PremiumSearchResult>(MethodType.Get, "tweets/search/{product}/{label}", new [] { "product", "label" }, InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Returns a collection of relevant Tweets matching a specified query.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> product (required)</para>
        /// <para>- <c>string</c> label (required)</para>
        /// <para>- <c>string</c> query (required)</para>
        /// <para>- <c>string</c> tag (optional)</para>
        /// <para>- <c>DateTimeOffset</c> fromDate (optional)</para>
        /// <para>- <c>DateTimeOffset</c> toDate (optional)</para>
        /// <para>- <c>long</c> maxResults (optional)</para>
        /// <para>- <c>string</c> next (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<PremiumSearchResult> SearchAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<PremiumSearchResult>(MethodType.Get, "tweets/search/{product}/{label}", new [] { "product", "label" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of relevant Tweets matching a specified query.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> product (required)</para>
        /// <para>- <c>string</c> label (required)</para>
        /// <para>- <c>string</c> query (required)</para>
        /// <para>- <c>string</c> tag (optional)</para>
        /// <para>- <c>DateTimeOffset</c> fromDate (optional)</para>
        /// <para>- <c>DateTimeOffset</c> toDate (optional)</para>
        /// <para>- <c>long</c> maxResults (optional)</para>
        /// <para>- <c>string</c> next (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<PremiumSearchResult> SearchAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<PremiumSearchResult>(MethodType.Get, "tweets/search/{product}/{label}", new [] { "product", "label" }, InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of relevant Tweets matching a specified query.</para>
        /// </summary>
        /// <param name="product">required.</param>
        /// <param name="label">required.</param>
        /// <param name="query">required.</param>
        /// <param name="tag">optional.</param>
        /// <param name="fromDate">optional.</param>
        /// <param name="toDate">optional.</param>
        /// <param name="maxResults">optional.</param>
        /// <param name="next">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses.</returns>
        public Task<PremiumSearchResult> SearchAsync(string product, string label, string query, string tag = null, DateTimeOffset? fromDate = null, DateTimeOffset? toDate = null, long? maxResults = null, string next = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(product == null) throw new ArgumentNullException("product");
            parameters.Add("product", product);
            if(label == null) throw new ArgumentNullException("label");
            parameters.Add("label", label);
            if(query == null) throw new ArgumentNullException("query");
            parameters.Add("query", query);
            if(tag != null) parameters.Add("tag", tag);
            if(fromDate != null) parameters.Add("fromDate", fromDate);
            if(toDate != null) parameters.Add("toDate", toDate);
            if(maxResults != null) parameters.Add("maxResults", maxResults);
            if(next != null) parameters.Add("next", next);
            return this.Tokens.AccessParameterReservedApiAsync<PremiumSearchResult>(MethodType.Get, "tweets/search/{product}/{label}", new [] { "product", "label" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns counts (data volumes) data for the specified query.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> product (required)</para>
        /// <para>- <c>string</c> label (required)</para>
        /// <para>- <c>string</c> query (required)</para>
        /// <para>- <c>long</c> fromDate (optional)</para>
        /// <para>- <c>long</c> toDate (optional)</para>
        /// <para>- <c>Bucket</c> bucket (optional)</para>
        /// <para>- <c>string</c> next (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The statuses counts.</returns>
        public Task<PremiumSearchCountResult> CountsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessParameterReservedApiAsync<PremiumSearchCountResult>(MethodType.Get, "tweets/search/{product}/{label}/counts", new [] { "product", "label" }, InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Returns counts (data volumes) data for the specified query.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> product (required)</para>
        /// <para>- <c>string</c> label (required)</para>
        /// <para>- <c>string</c> query (required)</para>
        /// <para>- <c>long</c> fromDate (optional)</para>
        /// <para>- <c>long</c> toDate (optional)</para>
        /// <para>- <c>Bucket</c> bucket (optional)</para>
        /// <para>- <c>string</c> next (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses counts.</returns>
        public Task<PremiumSearchCountResult> CountsAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<PremiumSearchCountResult>(MethodType.Get, "tweets/search/{product}/{label}/counts", new [] { "product", "label" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns counts (data volumes) data for the specified query.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> product (required)</para>
        /// <para>- <c>string</c> label (required)</para>
        /// <para>- <c>string</c> query (required)</para>
        /// <para>- <c>long</c> fromDate (optional)</para>
        /// <para>- <c>long</c> toDate (optional)</para>
        /// <para>- <c>Bucket</c> bucket (optional)</para>
        /// <para>- <c>string</c> next (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses counts.</returns>
        public Task<PremiumSearchCountResult> CountsAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<PremiumSearchCountResult>(MethodType.Get, "tweets/search/{product}/{label}/counts", new [] { "product", "label" }, InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Returns counts (data volumes) data for the specified query.</para>
        /// </summary>
        /// <param name="product">required.</param>
        /// <param name="label">required.</param>
        /// <param name="query">required.</param>
        /// <param name="fromDate">optional.</param>
        /// <param name="toDate">optional.</param>
        /// <param name="bucket">optional.</param>
        /// <param name="next">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The statuses counts.</returns>
        public Task<PremiumSearchCountResult> CountsAsync(string product, string label, string query, long? fromDate = null, long? toDate = null, Bucket? bucket = null, string next = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(product == null) throw new ArgumentNullException("product");
            parameters.Add("product", product);
            if(label == null) throw new ArgumentNullException("label");
            parameters.Add("label", label);
            if(query == null) throw new ArgumentNullException("query");
            parameters.Add("query", query);
            if(fromDate != null) parameters.Add("fromDate", fromDate);
            if(toDate != null) parameters.Add("toDate", toDate);
            if(bucket != null) parameters.Add("bucket", bucket);
            if(next != null) parameters.Add("next", next);
            return this.Tokens.AccessParameterReservedApiAsync<PremiumSearchCountResult>(MethodType.Get, "tweets/search/{product}/{label}/counts", new [] { "product", "label" }, parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST users.
    /// </summary>
    public partial class Users : ApiProviderBase
    {
        internal Users(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Returns a collection of users that the specified user can "contribute" to.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> ContributeesAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/contributees", parameters);
        }

        /// <summary>
        /// <para>Returns a collection of users that the specified user can "contribute" to.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> ContributeesAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/contributees", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of users that the specified user can "contribute" to.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> ContributeesAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/contributees", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of users that the specified user can "contribute" to.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> ContributeesAsync(long user_id, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/contributees", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of users that the specified user can "contribute" to.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> ContributeesAsync(string screen_name, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/contributees", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of users who can contribute to the specified account.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> ContributorsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/contributors", parameters);
        }

        /// <summary>
        /// <para>Returns a collection of users who can contribute to the specified account.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> ContributorsAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/contributors", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of users who can contribute to the specified account.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> skip_status (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> ContributorsAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/contributors", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of users who can contribute to the specified account.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> ContributorsAsync(long user_id, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/contributors", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a collection of users who can contribute to the specified account.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="skip_status">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> ContributorsAsync(string screen_name, bool? include_entities = null, bool? skip_status = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(skip_status != null) parameters.Add("skip_status", skip_status);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/contributors", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> LookupAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/lookup", parameters);
        }

        /// <summary>
        /// <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> LookupAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/lookup", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> LookupAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/lookup", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> LookupAsync(IEnumerable<long> user_id, bool? include_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(user_id == null) throw new ArgumentNullException("user_id");
            parameters.Add("user_id", user_id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/lookup", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> LookupAsync(IEnumerable<string> screen_name, bool? include_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/lookup", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the size of the specified user's profile banner.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The sizes.</returns>
        public Task<ProfileBannerSizes> ProfileBannerAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<ProfileBannerSizes>(MethodType.Get, "users/profile_banner", parameters);
        }

        /// <summary>
        /// <para>Returns the size of the specified user's profile banner.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The sizes.</returns>
        public Task<ProfileBannerSizes> ProfileBannerAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ProfileBannerSizes>(MethodType.Get, "users/profile_banner", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the size of the specified user's profile banner.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The sizes.</returns>
        public Task<ProfileBannerSizes> ProfileBannerAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<ProfileBannerSizes>(MethodType.Get, "users/profile_banner", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the size of the specified user's profile banner.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The sizes.</returns>
        public Task<ProfileBannerSizes> ProfileBannerAsync(long user_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            return this.Tokens.AccessApiAsync<ProfileBannerSizes>(MethodType.Get, "users/profile_banner", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the size of the specified user's profile banner.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The sizes.</returns>
        public Task<ProfileBannerSizes> ProfileBannerAsync(string screen_name, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            return this.Tokens.AccessApiAsync<ProfileBannerSizes>(MethodType.Get, "users/profile_banner", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Provides a simple, relevance-based search interface to public user accounts on Twitter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> q (required)</para>
        /// <para>- <c>int</c> page (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> SearchAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/search", parameters);
        }

        /// <summary>
        /// <para>Provides a simple, relevance-based search interface to public user accounts on Twitter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> q (required)</para>
        /// <para>- <c>int</c> page (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> SearchAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/search", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Provides a simple, relevance-based search interface to public user accounts on Twitter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> q (required)</para>
        /// <para>- <c>int</c> page (optional)</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> SearchAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/search", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Provides a simple, relevance-based search interface to public user accounts on Twitter.</para>
        /// </summary>
        /// <param name="q">required.</param>
        /// <param name="page">optional.</param>
        /// <param name="count">optional.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> SearchAsync(string q, int? page = null, int? count = null, bool? include_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(q == null) throw new ArgumentNullException("q");
            parameters.Add("q", q);
            if(page != null) parameters.Add("page", page);
            if(count != null) parameters.Add("count", count);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiArrayAsync<User>(MethodType.Get, "users/search", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "users/show", parameters);
        }

        /// <summary>
        /// <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "users/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>bool</c> include_entities (optional)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "users/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(long user_id, bool? include_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "users/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="include_entities">optional.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ShowAsync(string screen_name, bool? include_entities = null, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(include_entities != null) parameters.Add("include_entities", include_entities);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Get, "users/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the list of suggested user categories.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> lang (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The categories.</returns>
        public Task<ListedResponse<Category>> SuggestionsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiArrayAsync<Category>(MethodType.Get, "users/suggestions", parameters);
        }

        /// <summary>
        /// <para>Returns the list of suggested user categories.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> lang (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The categories.</returns>
        public Task<ListedResponse<Category>> SuggestionsAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Category>(MethodType.Get, "users/suggestions", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the list of suggested user categories.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> lang (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The categories.</returns>
        public Task<ListedResponse<Category>> SuggestionsAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiArrayAsync<Category>(MethodType.Get, "users/suggestions", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns the list of suggested user categories.</para>
        /// </summary>
        /// <param name="lang">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The categories.</returns>
        public Task<ListedResponse<Category>> SuggestionsAsync(string lang = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(lang != null) parameters.Add("lang", lang);
            return this.Tokens.AccessApiArrayAsync<Category>(MethodType.Get, "users/suggestions", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Access the users in a given category of the Twitter suggested user list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> slug (required)</para>
        /// <para>- <c>string</c> lang (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The category.</returns>
        public Task<CategoryResponse> SuggestionAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessParameterReservedApiAsync<CategoryResponse>(MethodType.Get, "users/suggestions/{slug}", new [] { "slug" }, InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Access the users in a given category of the Twitter suggested user list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> slug (required)</para>
        /// <para>- <c>string</c> lang (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The category.</returns>
        public Task<CategoryResponse> SuggestionAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<CategoryResponse>(MethodType.Get, "users/suggestions/{slug}", new [] { "slug" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Access the users in a given category of the Twitter suggested user list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> slug (required)</para>
        /// <para>- <c>string</c> lang (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The category.</returns>
        public Task<CategoryResponse> SuggestionAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiAsync<CategoryResponse>(MethodType.Get, "users/suggestions/{slug}", new [] { "slug" }, InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Access the users in a given category of the Twitter suggested user list.</para>
        /// </summary>
        /// <param name="slug">required.</param>
        /// <param name="lang">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The category.</returns>
        public Task<CategoryResponse> SuggestionAsync(string slug, string lang = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            if(lang != null) parameters.Add("lang", lang);
            return this.Tokens.AccessParameterReservedApiAsync<CategoryResponse>(MethodType.Get, "users/suggestions/{slug}", new [] { "slug" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Access the users in a given category of the Twitter suggested user list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> slug (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> SuggestedMembersAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessParameterReservedApiArrayAsync<User>(MethodType.Get, "users/suggestions/{slug}/members", new [] { "slug" }, InternalUtils.ExpressionsToDictionary(parameters), CancellationToken.None);
        }

        /// <summary>
        /// <para>Access the users in a given category of the Twitter suggested user list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> slug (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> SuggestedMembersAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiArrayAsync<User>(MethodType.Get, "users/suggestions/{slug}/members", new [] { "slug" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Access the users in a given category of the Twitter suggested user list.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> slug (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> SuggestedMembersAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessParameterReservedApiArrayAsync<User>(MethodType.Get, "users/suggestions/{slug}/members", new [] { "slug" }, InternalUtils.ResolveObject(parameters), cancellationToken);
        }

        /// <summary>
        /// <para>Access the users in a given category of the Twitter suggested user list.</para>
        /// </summary>
        /// <param name="slug">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The users.</returns>
        public Task<ListedResponse<User>> SuggestedMembersAsync(string slug, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(slug == null) throw new ArgumentNullException("slug");
            parameters.Add("slug", slug);
            return this.Tokens.AccessParameterReservedApiArrayAsync<User>(MethodType.Get, "users/suggestions/{slug}/members", new [] { "slug" }, parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Report the specified user as a spam account to Twitter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ReportSpamAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "users/report_spam", parameters);
        }

        /// <summary>
        /// <para>Report the specified user as a spam account to Twitter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ReportSpamAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "users/report_spam", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Report the specified user as a spam account to Twitter.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> screen_name (any one is required)</para>
        /// <para>- <c>long</c> user_id (any one is required)</para>
        /// <para>- <c>bool</c> include_ext_alt_text (optional)</para>
        /// <para>- <c>TweetMode</c> tweet_mode (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ReportSpamAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "users/report_spam", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Report the specified user as a spam account to Twitter.</para>
        /// </summary>
        /// <param name="screen_name">any one is required.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ReportSpamAsync(string screen_name, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(screen_name == null) throw new ArgumentNullException("screen_name");
            parameters.Add("screen_name", screen_name);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "users/report_spam", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Report the specified user as a spam account to Twitter.</para>
        /// </summary>
        /// <param name="user_id">any one is required.</param>
        /// <param name="include_ext_alt_text">optional.</param>
        /// <param name="tweet_mode">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The user.</returns>
        public Task<UserResponse> ReportSpamAsync(long user_id, bool? include_ext_alt_text = null, TweetMode? tweet_mode = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            parameters.Add("user_id", user_id);
            if(include_ext_alt_text != null) parameters.Add("include_ext_alt_text", include_ext_alt_text);
            if(tweet_mode != null) parameters.Add("tweet_mode", tweet_mode);
            return this.Tokens.AccessApiAsync<UserResponse>(MethodType.Post, "users/report_spam", parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST direct_messages/welcome_messages.
    /// </summary>
    public partial class WelcomeMessages : ApiProviderBase
    {
        internal WelcomeMessages(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> text (required)</para>
        /// <para>- <c>string</c> quick_reply_type (optional)</para>
        /// <para>- <c>string</c> attachment_type (optional)</para>
        /// <para>- <c>long</c> attachment_media_id (optional)</para>
        /// <para>- <c>string</c> name (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The message template.</returns>
        public Task<WelcomeMessageResponse> NewAsync(params Expression<Func<string, object>>[] parameters)
        {
            var jm = new string[11];
            jm[0] = "{\"welcome_message\" : {";
            jm[1] = "\"name\": $name,";
            jm[2] = "\"message_data\": {";
            jm[3] = "\"text\": $text,";
            jm[4] = "\"quick_reply\": {";
            jm[5] = "\"type\": $quick_reply_type";
            jm[6] = "},\"attachment\": {";
            jm[7] = "\"type\": $attachment_type,";
            jm[8] = "\"media\": {";
            jm[9] = "\"id\": $attachment_media_id";
            jm[10] = "}}}}}";
            return this.Tokens.AccessJsonParameteredApiAsync<WelcomeMessageResponse>("direct_messages/welcome_messages/new", parameters, jm);
        }

        /// <summary>
        /// <para>Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> text (required)</para>
        /// <para>- <c>string</c> quick_reply_type (optional)</para>
        /// <para>- <c>string</c> attachment_type (optional)</para>
        /// <para>- <c>long</c> attachment_media_id (optional)</para>
        /// <para>- <c>string</c> name (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The message template.</returns>
        public Task<WelcomeMessageResponse> NewAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            var jm = new string[11];
            jm[0] = "{\"welcome_message\" : {";
            jm[1] = "\"name\": $name,";
            jm[2] = "\"message_data\": {";
            jm[3] = "\"text\": $text,";
            jm[4] = "\"quick_reply\": {";
            jm[5] = "\"type\": $quick_reply_type";
            jm[6] = "},\"attachment\": {";
            jm[7] = "\"type\": $attachment_type,";
            jm[8] = "\"media\": {";
            jm[9] = "\"id\": $attachment_media_id";
            jm[10] = "}}}}}";
            return this.Tokens.AccessJsonParameteredApiAsync<WelcomeMessageResponse>("direct_messages/welcome_messages/new", parameters, jm, cancellationToken);
        }

        /// <summary>
        /// <para>Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> text (required)</para>
        /// <para>- <c>string</c> quick_reply_type (optional)</para>
        /// <para>- <c>string</c> attachment_type (optional)</para>
        /// <para>- <c>long</c> attachment_media_id (optional)</para>
        /// <para>- <c>string</c> name (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The message template.</returns>
        public Task<WelcomeMessageResponse> NewAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            var jm = new string[11];
            jm[0] = "{\"welcome_message\" : {";
            jm[1] = "\"name\": $name,";
            jm[2] = "\"message_data\": {";
            jm[3] = "\"text\": $text,";
            jm[4] = "\"quick_reply\": {";
            jm[5] = "\"type\": $quick_reply_type";
            jm[6] = "},\"attachment\": {";
            jm[7] = "\"type\": $attachment_type,";
            jm[8] = "\"media\": {";
            jm[9] = "\"id\": $attachment_media_id";
            jm[10] = "}}}}}";
            return this.Tokens.AccessJsonParameteredApiAsync<WelcomeMessageResponse>("direct_messages/welcome_messages/new", parameters, jm, cancellationToken);
        }

        /// <summary>
        /// <para>Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.</para>
        /// </summary>
        /// <param name="text">required.</param>
        /// <param name="quick_reply_type">optional.</param>
        /// <param name="attachment_type">optional.</param>
        /// <param name="attachment_media_id">optional.</param>
        /// <param name="name">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The message template.</returns>
        public Task<WelcomeMessageResponse> NewAsync(string text, string quick_reply_type = null, string attachment_type = null, long? attachment_media_id = null, string name = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var jm = new string[11];
            jm[0] = "{\"welcome_message\" : {";
            jm[1] = "\"name\": $name,";
            jm[2] = "\"message_data\": {";
            jm[3] = "\"text\": $text,";
            jm[4] = "\"quick_reply\": {";
            jm[5] = "\"type\": $quick_reply_type";
            jm[6] = "},\"attachment\": {";
            jm[7] = "\"type\": $attachment_type,";
            jm[8] = "\"media\": {";
            jm[9] = "\"id\": $attachment_media_id";
            jm[10] = "}}}}}";
            var parameters = new Dictionary<string, object>();
            if(text == null) throw new ArgumentNullException("text");
            parameters.Add("text", text);
            if(quick_reply_type != null) parameters.Add("quick_reply_type", quick_reply_type);
            if(attachment_type != null) parameters.Add("attachment_type", attachment_type);
            if(attachment_media_id != null) parameters.Add("attachment_media_id", attachment_media_id);
            if(name != null) parameters.Add("name", name);
            return this.Tokens.AccessJsonParameteredApiAsync<WelcomeMessageResponse>("direct_messages/welcome_messages/new", parameters, jm, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a list of Welcome Messages.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>string</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The Welcome Messages.</returns>
        public Task<CursoredWelcomeMessages> ListAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<CursoredWelcomeMessages>(MethodType.Get, "direct_messages/welcome_messages/list", parameters);
        }

        /// <summary>
        /// <para>Returns a list of Welcome Messages.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>string</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Welcome Messages.</returns>
        public Task<CursoredWelcomeMessages> ListAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<CursoredWelcomeMessages>(MethodType.Get, "direct_messages/welcome_messages/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a list of Welcome Messages.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>string</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Welcome Messages.</returns>
        public Task<CursoredWelcomeMessages> ListAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<CursoredWelcomeMessages>(MethodType.Get, "direct_messages/welcome_messages/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a list of Welcome Messages.</para>
        /// </summary>
        /// <param name="count">optional.</param>
        /// <param name="cursor">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Welcome Messages.</returns>
        public Task<CursoredWelcomeMessages> ListAsync(int? count = null, string cursor = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            return this.Tokens.AccessApiAsync<CursoredWelcomeMessages>(MethodType.Get, "direct_messages/welcome_messages/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a Welcome Message by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The Welcome Message.</returns>
        public Task<WelcomeMessageResponse> ShowAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<WelcomeMessageResponse>(MethodType.Get, "direct_messages/welcome_messages/show", parameters);
        }

        /// <summary>
        /// <para>Returns a Welcome Message by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Welcome Message.</returns>
        public Task<WelcomeMessageResponse> ShowAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<WelcomeMessageResponse>(MethodType.Get, "direct_messages/welcome_messages/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a Welcome Message by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Welcome Message.</returns>
        public Task<WelcomeMessageResponse> ShowAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<WelcomeMessageResponse>(MethodType.Get, "direct_messages/welcome_messages/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a Welcome Message by the given id.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Welcome Message.</returns>
        public Task<WelcomeMessageResponse> ShowAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(id == null) throw new ArgumentNullException("id");
            parameters.Add("id", id);
            return this.Tokens.AccessApiAsync<WelcomeMessageResponse>(MethodType.Get, "direct_messages/welcome_messages/show", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Deletes a Welcome Message by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        public Task DestroyAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Delete, "direct_messages/welcome_messages/destroy", parameters);
        }

        /// <summary>
        /// <para>Deletes a Welcome Message by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task DestroyAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Delete, "direct_messages/welcome_messages/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Deletes a Welcome Message by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task DestroyAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Delete, "direct_messages/welcome_messages/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Deletes a Welcome Message by the given id.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task DestroyAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(id == null) throw new ArgumentNullException("id");
            parameters.Add("id", id);
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Delete, "direct_messages/welcome_messages/destroy", parameters, cancellationToken);
        }
    }

    /// <summary>
    /// Provides a set of methods for the wrapper of GET/POST direct_messages/welcome_messages/Rules.
    /// </summary>
    public partial class WelcomeMessagesRules : ApiProviderBase
    {
        internal WelcomeMessagesRules(TokensBase e) : base(e) { }

        /// <summary>
        /// <para>Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> welcome_message_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The created Welcome Message Rule.</returns>
        public Task<WelcomeMessageRuleResponse> NewAsync(params Expression<Func<string, object>>[] parameters)
        {
            var jm = new string[3];
            jm[0] = "{\"welcome_message_rule\": {";
            jm[1] = "\"welcome_message_id\": $welcome_message_id";
            jm[2] = "}}";
            return this.Tokens.AccessJsonParameteredApiAsync<WelcomeMessageRuleResponse>("direct_messages/welcome_messages/rules/new", parameters, jm, "welcome_message_rule");
        }

        /// <summary>
        /// <para>Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> welcome_message_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The created Welcome Message Rule.</returns>
        public Task<WelcomeMessageRuleResponse> NewAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            var jm = new string[3];
            jm[0] = "{\"welcome_message_rule\": {";
            jm[1] = "\"welcome_message_id\": $welcome_message_id";
            jm[2] = "}}";
            return this.Tokens.AccessJsonParameteredApiAsync<WelcomeMessageRuleResponse>("direct_messages/welcome_messages/rules/new", parameters, jm, cancellationToken, "welcome_message_rule");
        }

        /// <summary>
        /// <para>Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> welcome_message_id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The created Welcome Message Rule.</returns>
        public Task<WelcomeMessageRuleResponse> NewAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            var jm = new string[3];
            jm[0] = "{\"welcome_message_rule\": {";
            jm[1] = "\"welcome_message_id\": $welcome_message_id";
            jm[2] = "}}";
            return this.Tokens.AccessJsonParameteredApiAsync<WelcomeMessageRuleResponse>("direct_messages/welcome_messages/rules/new", parameters, jm, cancellationToken, "welcome_message_rule");
        }

        /// <summary>
        /// <para>Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.</para>
        /// </summary>
        /// <param name="welcome_message_id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The created Welcome Message Rule.</returns>
        public Task<WelcomeMessageRuleResponse> NewAsync(string welcome_message_id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var jm = new string[3];
            jm[0] = "{\"welcome_message_rule\": {";
            jm[1] = "\"welcome_message_id\": $welcome_message_id";
            jm[2] = "}}";
            var parameters = new Dictionary<string, object>();
            if(welcome_message_id == null) throw new ArgumentNullException("welcome_message_id");
            parameters.Add("welcome_message_id", welcome_message_id);
            return this.Tokens.AccessJsonParameteredApiAsync<WelcomeMessageRuleResponse>("direct_messages/welcome_messages/rules/new", parameters, jm, cancellationToken, "welcome_message_rule");
        }

        /// <summary>
        /// <para>Returns a list of Welcome Message Rules.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>string</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The Welcome Message Rules.</returns>
        public Task<CursoredWelcomeMessageRules> ListAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<CursoredWelcomeMessageRules>(MethodType.Get, "direct_messages/welcome_messages/rules/list", parameters);
        }

        /// <summary>
        /// <para>Returns a list of Welcome Message Rules.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>string</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Welcome Message Rules.</returns>
        public Task<CursoredWelcomeMessageRules> ListAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<CursoredWelcomeMessageRules>(MethodType.Get, "direct_messages/welcome_messages/rules/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a list of Welcome Message Rules.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> count (optional)</para>
        /// <para>- <c>string</c> cursor (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Welcome Message Rules.</returns>
        public Task<CursoredWelcomeMessageRules> ListAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<CursoredWelcomeMessageRules>(MethodType.Get, "direct_messages/welcome_messages/rules/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a list of Welcome Message Rules.</para>
        /// </summary>
        /// <param name="count">optional.</param>
        /// <param name="cursor">optional.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Welcome Message Rules.</returns>
        public Task<CursoredWelcomeMessageRules> ListAsync(int? count = null, string cursor = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(count != null) parameters.Add("count", count);
            if(cursor != null) parameters.Add("cursor", cursor);
            return this.Tokens.AccessApiAsync<CursoredWelcomeMessageRules>(MethodType.Get, "direct_messages/welcome_messages/rules/list", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Returns a Welcome Message Rule by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>The Welcome Message Rule.</returns>
        public Task<WelcomeMessageRuleResponse> ShowAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiAsync<WelcomeMessageRuleResponse>(MethodType.Get, "direct_messages/welcome_messages/rules/show", parameters, "welcome_message_rule");
        }

        /// <summary>
        /// <para>Returns a Welcome Message Rule by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Welcome Message Rule.</returns>
        public Task<WelcomeMessageRuleResponse> ShowAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<WelcomeMessageRuleResponse>(MethodType.Get, "direct_messages/welcome_messages/rules/show", parameters, cancellationToken, "welcome_message_rule");
        }

        /// <summary>
        /// <para>Returns a Welcome Message Rule by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Welcome Message Rule.</returns>
        public Task<WelcomeMessageRuleResponse> ShowAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiAsync<WelcomeMessageRuleResponse>(MethodType.Get, "direct_messages/welcome_messages/rules/show", parameters, cancellationToken, "welcome_message_rule");
        }

        /// <summary>
        /// <para>Returns a Welcome Message Rule by the given id.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The Welcome Message Rule.</returns>
        public Task<WelcomeMessageRuleResponse> ShowAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(id == null) throw new ArgumentNullException("id");
            parameters.Add("id", id);
            return this.Tokens.AccessApiAsync<WelcomeMessageRuleResponse>(MethodType.Get, "direct_messages/welcome_messages/rules/show", parameters, cancellationToken, "welcome_message_rule");
        }

        /// <summary>
        /// <para>Deletes a Welcome Message Rule by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        public Task DestroyAsync(params Expression<Func<string, object>>[] parameters)
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Delete, "direct_messages/welcome_messages/rules/destroy", parameters);
        }

        /// <summary>
        /// <para>Deletes a Welcome Message Rule by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task DestroyAsync(IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Delete, "direct_messages/welcome_messages/rules/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Deletes a Welcome Message Rule by the given id.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task DestroyAsync(object parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Delete, "direct_messages/welcome_messages/rules/destroy", parameters, cancellationToken);
        }

        /// <summary>
        /// <para>Deletes a Welcome Message Rule by the given id.</para>
        /// </summary>
        /// <param name="id">required.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        public Task DestroyAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            var parameters = new Dictionary<string, object>();
            if(id == null) throw new ArgumentNullException("id");
            parameters.Add("id", id);
            return this.Tokens.AccessApiNoResponseAsync(MethodType.Delete, "direct_messages/welcome_messages/rules/destroy", parameters, cancellationToken);
        }
    }
}
